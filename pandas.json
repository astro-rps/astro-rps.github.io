{"kind":"Notebook","sha256":"eac289fb2dc45c0a09f6d289e7053709a24b402a9d9089f33a4371d9e4e64fe8","slug":"pandas","location":"/01_Lectures/Week 5/pandas.ipynb","dependencies":[],"frontmatter":{"title":"Pandas","github":"https://astro-rps.github.io/","keywords":[],"exports":[{"format":"ipynb","filename":"pandas.ipynb","url":"/build/pandas-20ee02f2fcc87f64eeb67424f5b94bb0.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"In this notebook lecture, we will cover:","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"WGcHNVRb9v"}],"key":"QcARWl7lhg"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Loading, filtering, and manipulating tabular data with the ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"BvBjfvzgeo"},{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"pandas","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Skya7FfHga"}],"key":"bPyWZbnxeK"},{"type":"text","value":" package","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Jb8DwlJ6Wx"}],"key":"D443PUMISF"}],"key":"bpIUPj5XFy"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"K4wGaG4tYd"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n%matplotlib inline ","key":"c7ZFEItZCM"},{"type":"output","id":"Btug4gQJnUaCllhObbhgi","data":[],"key":"Z7QwkV4POP"}],"data":{"type":"notebook-code"},"key":"P992xYKsU6"},{"type":"block","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"0. Tabular Data Handling with Numpy","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XIFOwqMtRZ"}],"identifier":"id-0-tabular-data-handling-with-numpy","label":"0. Tabular Data Handling with Numpy","html_id":"id-0-tabular-data-handling-with-numpy","implicit":true,"key":"Fz3wRWyYG0"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"zIzn1iOw0k"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Let’s say we have data in a file called “GaiaM92.csv” and we want to open it in Python. One option is to use numpy:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rH98tE45n8"}],"key":"PyjrJioANb"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"En2KYkOY3e"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"data = np.genfromtxt(\"./GaiaM92.csv\", delimiter=\",\", skip_header=1)\ndata","key":"vV4iQO9EcH"},{"type":"output","id":"g3-9a3RuqkoQtLLDRC8Qe","data":[{"output_type":"execute_result","execution_count":5,"metadata":{},"data":{"text/plain":{"content":"array([[ 2.59278972e+02,  4.31089818e+01,             nan, ...,\n                    nan,  1.95672800e+01,             nan],\n       [ 2.59289978e+02,  4.31050111e+01,             nan, ...,\n                    nan,  1.84345000e+01,  6.32349000e-01],\n       [ 2.59289054e+02,  4.31133782e+01,             nan, ...,\n                    nan,  1.92420200e+01,             nan],\n       ...,\n       [ 2.59257393e+02,  4.31632966e+01, -3.17254579e+00, ...,\n         1.17721990e+00,  1.90242880e+01,  6.21408460e-01],\n       [ 2.59272586e+02,  4.31676046e+01, -3.12183086e-01, ...,\n         4.06385234e+00,  1.78788530e+01,  6.74488070e-01],\n       [ 2.59270560e+02,  4.31673887e+01, -2.00777306e-01, ...,\n         1.26197385e+00,  1.91982980e+01,  7.78442400e-01]])","content_type":"text/plain"}}}],"key":"R7TiphSxAp"}],"data":{"type":"notebook-code"},"key":"lKxAcSpDD8"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If we wanted to access rows, we could do the following:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WDgrguba7g"}],"key":"EqUlceeb7i"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"nhxtuL01rc"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"print(data[0])","key":"zJLgD2m4r3"},{"type":"output","id":"oEe3eupA6UdZum8w3zXeF","data":[{"name":"stdout","output_type":"stream","text":"[259.27897188  43.10898178          nan          nan          nan\n  19.56728             nan]\n"}],"key":"bpg7PTBEv8"}],"data":{"type":"notebook-code"},"key":"gUt6f2LMBr"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Or if we wanted to access specific columns:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MsY7V72fFv"}],"key":"en9QI3abVL"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"VL2IY8tmEE"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"print(data[:, 0])","key":"JrT2b3EzcM"},{"type":"output","id":"vvcd6gIDzpqyRRdJffk4a","data":[{"name":"stdout","output_type":"stream","text":"[259.27897188 259.28997796 259.28905426 ... 259.25739277 259.2725861\n 259.27056011]\n"}],"key":"uJ3Imvlj2G"}],"data":{"type":"notebook-code"},"key":"wEztj4j5Xd"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This works, but isn’t very inuitive or user-friendly. Fortunately, there is a much nicer way to do the same operations using the package ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ef3vt05gZp"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"pandas","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"t8iw4cbZAe"}],"key":"gd5tA3jaZl"},{"type":"text","value":"!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ueUhVu36Ud"}],"key":"kPQOGTomdV"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"BGZAwfUswR"},{"type":"block","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"1. What is Pandas, and why should I use it?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"T8KualQFlG"}],"identifier":"id-1-what-is-pandas-and-why-should-i-use-it","label":"1. What is Pandas, and why should I use it?","html_id":"id-1-what-is-pandas-and-why-should-i-use-it","implicit":true,"key":"iauaeiaaOq"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"YgXnYwrTQk"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Officially, pandas is a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DBitkYqoli"},{"type":"inlineMath","value":" \\textit{a fast, powerful, flexible and easy to use open source data analysis and manipulation tool}","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext mathvariant=\"italic\">a</mtext><mtext> </mtext><mtext mathvariant=\"italic\">fast,</mtext><mtext> </mtext><mtext mathvariant=\"italic\">powerful,</mtext><mtext> </mtext><mtext mathvariant=\"italic\">flexible</mtext><mtext> </mtext><mtext mathvariant=\"italic\">and</mtext><mtext> </mtext><mtext mathvariant=\"italic\">easy</mtext><mtext> </mtext><mtext mathvariant=\"italic\">to</mtext><mtext> </mtext><mtext mathvariant=\"italic\">use</mtext><mtext> </mtext><mtext mathvariant=\"italic\">open</mtext><mtext> </mtext><mtext mathvariant=\"italic\">source</mtext><mtext> </mtext><mtext mathvariant=\"italic\">data</mtext><mtext> </mtext><mtext mathvariant=\"italic\">analysis</mtext><mtext> </mtext><mtext mathvariant=\"italic\">and</mtext><mtext> </mtext><mtext mathvariant=\"italic\">manipulation</mtext><mtext> </mtext><mtext mathvariant=\"italic\">tool</mtext></mrow><annotation encoding=\"application/x-tex\"> \\textit{a fast, powerful, flexible and easy to use open source data analysis and manipulation tool}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord text\"><span class=\"mord textit\">a fast, powerful, flexible and easy to use open source data analysis and manipulation tool</span></span></span></span></span>","key":"xEHHB1avX8"},{"type":"text","value":" (","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yzfpu8v367"},{"type":"link","url":"https://pandas.pydata.org/","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"https://​pandas​.pydata​.org​/","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"euclSq3Hoe"}],"urlSource":"https://pandas.pydata.org/","key":"r6BFitS4dI"},{"type":"text","value":").","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"f7VPuG64zJ"}],"key":"BTIJaGuW6x"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In practice, ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"O6V0ttkOc4"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"it’s a very user-friendly package for working with tabular data with Python","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"afzqHEAmw1"}],"key":"yQyZXPED3j"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"faWAY9jt25"}],"key":"OT0aRJDqhH"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"SU6FeiDVGP"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"When to use pandas","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"l4v1QSXW84"}],"identifier":"when-to-use-pandas","label":"When to use pandas","html_id":"when-to-use-pandas","implicit":true,"key":"W0BLcQcSwE"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"gMGcnVr4cG"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Pandas offers a convenient, easy-to-visualize interface to tabular data, including the reading/writing steps. This makes it ideal for:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BoLCxUn2j3"}],"key":"FZggn3J8Yj"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"(1)","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"O2QCkofXp3"}],"key":"nE2OysmTLA"},{"type":"text","value":" working with small or medium-sized datasets","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jE6fuHhJlD"}],"key":"MkU1fjBIWz"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"(2)","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"kEtwmDnMfN"}],"key":"Yhk7B4Jxqt"},{"type":"text","value":" manipulating data within Jupyter notebooks, and","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"f2wLds0UJY"}],"key":"VqTUl9Bd67"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"strong","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"(3)","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"U6uZB2twOA"}],"key":"r0mrChVYzd"},{"type":"text","value":" exporting Python data to files.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"bquza1kJID"}],"key":"sFAgqlcCZo"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"mTB9Y8ees2"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This notebook will explore each of these cases in some form or another.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lCZiJbngYN"}],"key":"tekNSnOPMF"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"nqMSwFE9XZ"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"When not to use pandas","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AravEuG1Gy"}],"identifier":"when-not-to-use-pandas","label":"When not to use pandas","html_id":"when-not-to-use-pandas","implicit":true,"key":"CrSLG49om6"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"q3PanfeQex"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"(1)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bTKB9xskLD"}],"key":"ukXb9ivbxR"},{"type":"text","value":" The first thing to note is that ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"V1umt7fExH"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"pandas is never necessary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"a6fw7Cqh7i"}],"key":"rV9o1BBg9j"},{"type":"text","value":": this is a pretty important point. There are other packages than can do everything that pandas can do, and most of its functionality can be reproduced with numpy alone. This being said, ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XLgWOljhaq"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"pandas is often the most convenient/user-friendly option","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BWBlA5NdkD"}],"key":"JIiuEGaEtm"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qJUsLBhUVw"}],"key":"WrSIG7SJkT"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"YLJyOrTU1Y"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"(2)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GrhwvTEZPb"}],"key":"h0nNo90yKG"},{"type":"text","value":" This user-friendliness comes with some overhead, i.e., it makes code a bit slower. For this reason, ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jhK3o8zB9w"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"pandas is not a good option if you are trying to have maximally-fast code","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kj9Q6MP256"}],"key":"kTiIxCs1uJ"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bU45rlVERO"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"not a good option for huge datasets","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"g5tQZ9MsKA"}],"key":"AqjcLIbfxF"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GHoI5ji6Xx"}],"key":"fpeCdXIN5K"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"q9dOAjow0t"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"(3)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Km0dOJ3x85"}],"key":"iTBFe59mmc"},{"type":"text","value":" If you need to be very careful about datatypes, pandas is probably not the best tool to use. I almost never run into such situations, but if exporting data with datatypes is important, then csv files (which pandas excels at) are not an option, and you should consider fits files instead.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CzVGXsuf8Q"}],"key":"eR832bW5w9"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"edrsuUjGr0"},{"type":"block","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2. “DataFrames”: pandas’ key tool","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"p6clpMlJhI"}],"identifier":"id-2-dataframes-pandas-key-tool","label":"2. “DataFrames”: pandas’ key tool","html_id":"id-2-dataframes-pandas-key-tool","implicit":true,"key":"r10XwzqQpQ"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"EFJyy0wS85"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The key tool that pandas introduces is the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SUKRy8GoAd"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"DataFrame","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DyIZGCxH4L"}],"key":"LIGtHc1sas"},{"type":"text","value":". Fundamentally, it’s just a 2D datastructure with rows and columns (and sometimes an index) -- i.e., it’s basically a table.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mJogYDuwbh"}],"key":"L57nhml4JV"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"U3ZGyX53cA"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2a. Creating a DataFrame from a file","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Y27lsIa9ap"}],"identifier":"id-2a-creating-a-dataframe-from-a-file","label":"2a. Creating a DataFrame from a file","html_id":"id-2a-creating-a-dataframe-from-a-file","implicit":true,"key":"hMf1BgKs52"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"LjnrwROEHO"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Pandas can be a very flexible tool for loading in datafiles in many different formats. The one you might most often run into is using data contained in .csv files. Here’s how you could load that with pandas:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NC0TcQVZor"}],"key":"e3zN9PLQWF"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"ADvA1L8SqP"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"filepath = \"./GaiaM92.csv\"\ndf = pd.read_csv(\n    filepath\n)  ## df is short for dataframe; this is fairly typical notation for pandas","key":"KeCd2uqwJ7"},{"type":"output","id":"UeeGdPis5Z6oq5pHW_HzS","data":[],"key":"YRG1ZhPOWC"}],"data":{"type":"notebook-code"},"key":"kXyBblqnd9"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"That’s it!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sVCHKz5DTp"}],"key":"mLqwIqYCl6"},{"type":"text","value":". That’s all it takes to generate a Pandas dataframe from a file. This assumes that the file itself has a row that is just the column names, but that’s pretty much it on the input formatting side. Let’s crack it open and see what it contains:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sqp75luqZ1"}],"key":"ClE7jCUCyo"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"aO9wQTh1Oa"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df","key":"yvlDCj1iOD"},{"type":"output","id":"7OowfdLZwBbs3otIzoRk2","data":[{"output_type":"execute_result","execution_count":111,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ra</th>\n      <th>dec</th>\n      <th>parallax</th>\n      <th>pmra</th>\n      <th>pmdec</th>\n      <th>phot_g_mean_mag</th>\n      <th>bp_rp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>259.278972</td>\n      <td>43.108982</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>19.567280</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>259.289978</td>\n      <td>43.105011</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>18.434500</td>\n      <td>0.632349</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>259.289054</td>\n      <td>43.113378</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>19.242020</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>259.290390</td>\n      <td>43.106504</td>\n      <td>1.533711</td>\n      <td>-5.808720</td>\n      <td>-1.708472</td>\n      <td>19.921402</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>259.306256</td>\n      <td>43.110687</td>\n      <td>1.106775</td>\n      <td>-4.624149</td>\n      <td>-1.093990</td>\n      <td>19.992563</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>8049</th>\n      <td>259.256567</td>\n      <td>43.162198</td>\n      <td>-0.325821</td>\n      <td>-5.009718</td>\n      <td>-0.854994</td>\n      <td>19.102306</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8050</th>\n      <td>259.265129</td>\n      <td>43.164826</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>20.134605</td>\n      <td>0.631699</td>\n    </tr>\n    <tr>\n      <th>8051</th>\n      <td>259.257393</td>\n      <td>43.163297</td>\n      <td>-3.172546</td>\n      <td>-7.635612</td>\n      <td>1.177220</td>\n      <td>19.024288</td>\n      <td>0.621408</td>\n    </tr>\n    <tr>\n      <th>8052</th>\n      <td>259.272586</td>\n      <td>43.167605</td>\n      <td>-0.312183</td>\n      <td>-4.403949</td>\n      <td>4.063852</td>\n      <td>17.878853</td>\n      <td>0.674488</td>\n    </tr>\n    <tr>\n      <th>8053</th>\n      <td>259.270560</td>\n      <td>43.167389</td>\n      <td>-0.200777</td>\n      <td>-0.786033</td>\n      <td>1.261974</td>\n      <td>19.198298</td>\n      <td>0.778442</td>\n    </tr>\n  </tbody>\n</table>\n<p>8054 rows × 7 columns</p>\n</div>","content_type":"text/html"},"text/plain":{"content":"              ra        dec  parallax      pmra     pmdec  phot_g_mean_mag  \\\n0     259.278972  43.108982       NaN       NaN       NaN        19.567280   \n1     259.289978  43.105011       NaN       NaN       NaN        18.434500   \n2     259.289054  43.113378       NaN       NaN       NaN        19.242020   \n3     259.290390  43.106504  1.533711 -5.808720 -1.708472        19.921402   \n4     259.306256  43.110687  1.106775 -4.624149 -1.093990        19.992563   \n...          ...        ...       ...       ...       ...              ...   \n8049  259.256567  43.162198 -0.325821 -5.009718 -0.854994        19.102306   \n8050  259.265129  43.164826       NaN       NaN       NaN        20.134605   \n8051  259.257393  43.163297 -3.172546 -7.635612  1.177220        19.024288   \n8052  259.272586  43.167605 -0.312183 -4.403949  4.063852        17.878853   \n8053  259.270560  43.167389 -0.200777 -0.786033  1.261974        19.198298   \n\n         bp_rp  \n0          NaN  \n1     0.632349  \n2          NaN  \n3          NaN  \n4          NaN  \n...        ...  \n8049       NaN  \n8050  0.631699  \n8051  0.621408  \n8052  0.674488  \n8053  0.778442  \n\n[8054 rows x 7 columns]","content_type":"text/plain"}}}],"key":"g6OiVTXlk0"}],"data":{"type":"notebook-code"},"key":"ZPkI0HhG3A"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The table above looks very nice! It’s clearly formatted, shows you the column names without lots of extraneous info (e.g. datatypes), etc. It even tells you the dimensions of the table!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MLqobg66PU"}],"key":"aXdxnglX3Z"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"As you can also see, there are some entries in this table that are showing “NaN” (“not a number”). And that’s OK! Pandas is great at filling in missing entries from tables, which is one reason to use the package in the first place.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xVj8jlMWrr"}],"key":"Osaq3xDeko"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"IN9A1kSXRB"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now, the output of the above is obviously truncated. If you want to preview the first 5 rows, you can do:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dTTI8pmShm"}],"key":"OmSFbj0j89"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"QNha75nlZb"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df.head(10)","key":"YEpLwFx9By"},{"type":"output","id":"eVDex3CxP_NyqYzt83wSr","data":[{"output_type":"execute_result","execution_count":112,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ra</th>\n      <th>dec</th>\n      <th>parallax</th>\n      <th>pmra</th>\n      <th>pmdec</th>\n      <th>phot_g_mean_mag</th>\n      <th>bp_rp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>259.278972</td>\n      <td>43.108982</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>19.567280</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>259.289978</td>\n      <td>43.105011</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>18.434500</td>\n      <td>0.632349</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>259.289054</td>\n      <td>43.113378</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>19.242020</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>259.290390</td>\n      <td>43.106504</td>\n      <td>1.533711</td>\n      <td>-5.808720</td>\n      <td>-1.708472</td>\n      <td>19.921402</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>259.306256</td>\n      <td>43.110687</td>\n      <td>1.106775</td>\n      <td>-4.624149</td>\n      <td>-1.093990</td>\n      <td>19.992563</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>259.268118</td>\n      <td>43.104699</td>\n      <td>-1.036598</td>\n      <td>-4.683732</td>\n      <td>-0.519738</td>\n      <td>19.920280</td>\n      <td>0.756393</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>259.268331</td>\n      <td>43.104789</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>20.417160</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>259.268817</td>\n      <td>43.106339</td>\n      <td>-0.031390</td>\n      <td>-5.688505</td>\n      <td>0.143810</td>\n      <td>19.317175</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>259.268159</td>\n      <td>43.105793</td>\n      <td>-0.770001</td>\n      <td>-1.065605</td>\n      <td>4.497394</td>\n      <td>19.669512</td>\n      <td>-0.181538</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>259.267877</td>\n      <td>43.105856</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>20.450974</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"           ra        dec  parallax      pmra     pmdec  phot_g_mean_mag  \\\n0  259.278972  43.108982       NaN       NaN       NaN        19.567280   \n1  259.289978  43.105011       NaN       NaN       NaN        18.434500   \n2  259.289054  43.113378       NaN       NaN       NaN        19.242020   \n3  259.290390  43.106504  1.533711 -5.808720 -1.708472        19.921402   \n4  259.306256  43.110687  1.106775 -4.624149 -1.093990        19.992563   \n5  259.268118  43.104699 -1.036598 -4.683732 -0.519738        19.920280   \n6  259.268331  43.104789       NaN       NaN       NaN        20.417160   \n7  259.268817  43.106339 -0.031390 -5.688505  0.143810        19.317175   \n8  259.268159  43.105793 -0.770001 -1.065605  4.497394        19.669512   \n9  259.267877  43.105856       NaN       NaN       NaN        20.450974   \n\n      bp_rp  \n0       NaN  \n1  0.632349  \n2       NaN  \n3       NaN  \n4       NaN  \n5  0.756393  \n6       NaN  \n7       NaN  \n8 -0.181538  \n9       NaN  ","content_type":"text/plain"}}}],"key":"NooocRpjIs"}],"data":{"type":"notebook-code"},"key":"uMPaghpw2r"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Have a long list of columns? You can print them easily:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bDGCFFzO0h"}],"key":"EyRMiciF4X"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"vjiYqbOlo7"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"print(df.columns)","key":"dqQVa4tuz6"},{"type":"output","id":"5UVGNdMaJqNrlrjp-NbvE","data":[{"name":"stdout","output_type":"stream","text":"Index(['ra', 'dec', 'parallax', 'pmra', 'pmdec', 'phot_g_mean_mag', 'bp_rp'], dtype='object')\n"}],"key":"HnRNtWvPC5"}],"data":{"type":"notebook-code"},"key":"efleygZ5Nn"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2b. Isolating Columns!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"y8S4eT64Kj"}],"identifier":"id-2b-isolating-columns","label":"2b. Isolating Columns!","html_id":"id-2b-isolating-columns","implicit":true,"key":"lH61iyWUWA"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"MOKwvQPdBc"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Pandas makes it trivial to access certain columns in your data. This is in contrast to raw numpy arrays. To do so with pandas, we can simply use the following notation:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bABe9gHAfW"}],"key":"xMJAUT4vWL"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"tEqnwhDeXF"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df[\"ra\"]","key":"LB0FyxOHZn"},{"type":"output","id":"2I2YXk4H-w-YUDhbnYcVm","data":[{"output_type":"execute_result","execution_count":114,"metadata":{},"data":{"text/plain":{"content":"0       259.278972\n1       259.289978\n2       259.289054\n3       259.290390\n4       259.306256\n           ...    \n8049    259.256567\n8050    259.265129\n8051    259.257393\n8052    259.272586\n8053    259.270560\nName: ra, Length: 8054, dtype: float64","content_type":"text/plain"}}}],"key":"JZCg23onOq"}],"data":{"type":"notebook-code"},"key":"pB1HTWEjXP"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The above is what we call a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GVgpr6lLZW"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Series","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FFQI0t8mLN"}],"key":"VIPrAyPxbj"},{"type":"text","value":" in pandas. It functions basically the same as a numpy array, but carries with it an index. If you just want the values, you can add “.values” to the end:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"c2uz8rThQD"}],"key":"u38WUz7YjC"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"xRteyaGwDY"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df[\"ra\"].values","key":"b0blD2iepx"},{"type":"output","id":"-U_REW5RHiJu7PvrGtxCz","data":[{"output_type":"execute_result","execution_count":115,"metadata":{},"data":{"text/plain":{"content":"array([259.27897188, 259.28997796, 259.28905426, ..., 259.25739277,\n       259.2725861 , 259.27056011])","content_type":"text/plain"}}}],"key":"Tt6eeg3G9X"}],"data":{"type":"notebook-code"},"key":"RKezmk3vgm"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Importantly, the above is a numpy array already","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oPy6oxOusL"}],"key":"KQczgBF8zb"},{"type":"text","value":"! This makes it somewhat clearer what is going on “under the hood”: pandas dataframes are very similar to organized collections of numpy arrays.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lDUssq8FIb"}],"key":"GdGBFGU9GU"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"mO3NqTLF1B"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If you want a single row, you will need the index of that row. For the case of index 0, this looks like:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bw6z4gWh00"}],"key":"w8egY98Dfr"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"SE2AlMOywX"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df.iloc[0].values","key":"jjJTCqxSzI"},{"type":"output","id":"ts8NEUn8CXn5gnPVuqrOO","data":[{"output_type":"execute_result","execution_count":116,"metadata":{},"data":{"text/plain":{"content":"array([259.27897188,  43.10898178,          nan,          nan,\n                nan,  19.56728   ,          nan])","content_type":"text/plain"}}}],"key":"VaoGrsMqJK"}],"data":{"type":"notebook-code"},"key":"sostbec7eI"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2c. Creating new columns in an existing dataframe","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KXsT6XIOqw"}],"identifier":"id-2c-creating-new-columns-in-an-existing-dataframe","label":"2c. Creating new columns in an existing dataframe","html_id":"id-2c-creating-new-columns-in-an-existing-dataframe","implicit":true,"key":"DBJvSSzfGg"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"Oac2NK08Bl"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df","key":"b0udZcjdcm"},{"type":"output","id":"gmT5P7dTsqjPFd4sFRiW8","data":[{"output_type":"execute_result","execution_count":117,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ra</th>\n      <th>dec</th>\n      <th>parallax</th>\n      <th>pmra</th>\n      <th>pmdec</th>\n      <th>phot_g_mean_mag</th>\n      <th>bp_rp</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>259.278972</td>\n      <td>43.108982</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>19.567280</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>259.289978</td>\n      <td>43.105011</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>18.434500</td>\n      <td>0.632349</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>259.289054</td>\n      <td>43.113378</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>19.242020</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>259.290390</td>\n      <td>43.106504</td>\n      <td>1.533711</td>\n      <td>-5.808720</td>\n      <td>-1.708472</td>\n      <td>19.921402</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>259.306256</td>\n      <td>43.110687</td>\n      <td>1.106775</td>\n      <td>-4.624149</td>\n      <td>-1.093990</td>\n      <td>19.992563</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>8049</th>\n      <td>259.256567</td>\n      <td>43.162198</td>\n      <td>-0.325821</td>\n      <td>-5.009718</td>\n      <td>-0.854994</td>\n      <td>19.102306</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>8050</th>\n      <td>259.265129</td>\n      <td>43.164826</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>20.134605</td>\n      <td>0.631699</td>\n    </tr>\n    <tr>\n      <th>8051</th>\n      <td>259.257393</td>\n      <td>43.163297</td>\n      <td>-3.172546</td>\n      <td>-7.635612</td>\n      <td>1.177220</td>\n      <td>19.024288</td>\n      <td>0.621408</td>\n    </tr>\n    <tr>\n      <th>8052</th>\n      <td>259.272586</td>\n      <td>43.167605</td>\n      <td>-0.312183</td>\n      <td>-4.403949</td>\n      <td>4.063852</td>\n      <td>17.878853</td>\n      <td>0.674488</td>\n    </tr>\n    <tr>\n      <th>8053</th>\n      <td>259.270560</td>\n      <td>43.167389</td>\n      <td>-0.200777</td>\n      <td>-0.786033</td>\n      <td>1.261974</td>\n      <td>19.198298</td>\n      <td>0.778442</td>\n    </tr>\n  </tbody>\n</table>\n<p>8054 rows × 7 columns</p>\n</div>","content_type":"text/html"},"text/plain":{"content":"              ra        dec  parallax      pmra     pmdec  phot_g_mean_mag  \\\n0     259.278972  43.108982       NaN       NaN       NaN        19.567280   \n1     259.289978  43.105011       NaN       NaN       NaN        18.434500   \n2     259.289054  43.113378       NaN       NaN       NaN        19.242020   \n3     259.290390  43.106504  1.533711 -5.808720 -1.708472        19.921402   \n4     259.306256  43.110687  1.106775 -4.624149 -1.093990        19.992563   \n...          ...        ...       ...       ...       ...              ...   \n8049  259.256567  43.162198 -0.325821 -5.009718 -0.854994        19.102306   \n8050  259.265129  43.164826       NaN       NaN       NaN        20.134605   \n8051  259.257393  43.163297 -3.172546 -7.635612  1.177220        19.024288   \n8052  259.272586  43.167605 -0.312183 -4.403949  4.063852        17.878853   \n8053  259.270560  43.167389 -0.200777 -0.786033  1.261974        19.198298   \n\n         bp_rp  \n0          NaN  \n1     0.632349  \n2          NaN  \n3          NaN  \n4          NaN  \n...        ...  \n8049       NaN  \n8050  0.631699  \n8051  0.621408  \n8052  0.674488  \n8053  0.778442  \n\n[8054 rows x 7 columns]","content_type":"text/plain"}}}],"key":"aS1E94onxo"}],"data":{"type":"notebook-code"},"key":"Fm5NSeIDKG"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Want to use a column (or more than one!) to create a new column! It’s super simple with pandas. Let’s see how that works:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bbRKaX7YgF"}],"key":"O7TlVtlKYp"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"XBMLFDkYC5"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df[\"NewColumn\"] = np.sqrt(df[\"pmra\"] ** 2 + df[\"pmdec\"] ** 2)","key":"RADtHgiE4s"},{"type":"output","id":"PNkHZHwxHDp_ranQln-IN","data":[],"key":"EAAnJNJZ3t"}],"data":{"type":"notebook-code"},"key":"PzhQJhV0NH"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now if we re-show the dataframe, our new column will be there","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"o9m5qZlxE4"}],"key":"fwiVi4fJtO"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"SSV5gDrF21"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df.head()","key":"ioWJNvRsB6"},{"type":"output","id":"9V1eW67KnNRbRSeCSt2Jy","data":[{"output_type":"execute_result","execution_count":119,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ra</th>\n      <th>dec</th>\n      <th>parallax</th>\n      <th>pmra</th>\n      <th>pmdec</th>\n      <th>phot_g_mean_mag</th>\n      <th>bp_rp</th>\n      <th>NewColumn</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>259.278972</td>\n      <td>43.108982</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>19.567280</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>259.289978</td>\n      <td>43.105011</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>18.434500</td>\n      <td>0.632349</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>259.289054</td>\n      <td>43.113378</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>19.242020</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>259.290390</td>\n      <td>43.106504</td>\n      <td>1.533711</td>\n      <td>-5.808720</td>\n      <td>-1.708472</td>\n      <td>19.921402</td>\n      <td>NaN</td>\n      <td>6.054759</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>259.306256</td>\n      <td>43.110687</td>\n      <td>1.106775</td>\n      <td>-4.624149</td>\n      <td>-1.093990</td>\n      <td>19.992563</td>\n      <td>NaN</td>\n      <td>4.751796</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"           ra        dec  parallax      pmra     pmdec  phot_g_mean_mag  \\\n0  259.278972  43.108982       NaN       NaN       NaN        19.567280   \n1  259.289978  43.105011       NaN       NaN       NaN        18.434500   \n2  259.289054  43.113378       NaN       NaN       NaN        19.242020   \n3  259.290390  43.106504  1.533711 -5.808720 -1.708472        19.921402   \n4  259.306256  43.110687  1.106775 -4.624149 -1.093990        19.992563   \n\n      bp_rp  NewColumn  \n0       NaN        NaN  \n1  0.632349        NaN  \n2       NaN        NaN  \n3       NaN   6.054759  \n4       NaN   4.751796  ","content_type":"text/plain"}}}],"key":"BM22APZ36G"}],"data":{"type":"notebook-code"},"key":"bCjLFuWBaf"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"What if you have an entirely new column that is not dependent on other columns (as in the case above?). Let’s see the case of adding a new column of random numbers.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mie9md7ITv"}],"key":"q0Vrdlf9B9"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"HOUb3XSN1l"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df[\"NewColumn2\"] = np.random.uniform(size=len(df))","key":"jQjtiuEZVZ"},{"type":"output","id":"QFekryYVD1MK8Ifxu32gV","data":[],"key":"X2kkdUIwaE"}],"data":{"type":"notebook-code"},"key":"pJdJZvrcak"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df.head()","key":"RvniOglQqU"},{"type":"output","id":"T13UeehrRYvLe5pXQodqL","data":[{"output_type":"execute_result","execution_count":121,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ra</th>\n      <th>dec</th>\n      <th>parallax</th>\n      <th>pmra</th>\n      <th>pmdec</th>\n      <th>phot_g_mean_mag</th>\n      <th>bp_rp</th>\n      <th>NewColumn</th>\n      <th>NewColumn2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>259.278972</td>\n      <td>43.108982</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>19.567280</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.111252</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>259.289978</td>\n      <td>43.105011</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>18.434500</td>\n      <td>0.632349</td>\n      <td>NaN</td>\n      <td>0.732642</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>259.289054</td>\n      <td>43.113378</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>19.242020</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.112738</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>259.290390</td>\n      <td>43.106504</td>\n      <td>1.533711</td>\n      <td>-5.808720</td>\n      <td>-1.708472</td>\n      <td>19.921402</td>\n      <td>NaN</td>\n      <td>6.054759</td>\n      <td>0.827502</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>259.306256</td>\n      <td>43.110687</td>\n      <td>1.106775</td>\n      <td>-4.624149</td>\n      <td>-1.093990</td>\n      <td>19.992563</td>\n      <td>NaN</td>\n      <td>4.751796</td>\n      <td>0.128081</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"           ra        dec  parallax      pmra     pmdec  phot_g_mean_mag  \\\n0  259.278972  43.108982       NaN       NaN       NaN        19.567280   \n1  259.289978  43.105011       NaN       NaN       NaN        18.434500   \n2  259.289054  43.113378       NaN       NaN       NaN        19.242020   \n3  259.290390  43.106504  1.533711 -5.808720 -1.708472        19.921402   \n4  259.306256  43.110687  1.106775 -4.624149 -1.093990        19.992563   \n\n      bp_rp  NewColumn  NewColumn2  \n0       NaN        NaN    0.111252  \n1  0.632349        NaN    0.732642  \n2       NaN        NaN    0.112738  \n3       NaN   6.054759    0.827502  \n4       NaN   4.751796    0.128081  ","content_type":"text/plain"}}}],"key":"vF9IA3EqsR"}],"data":{"type":"notebook-code","scrolled":true},"key":"ezLQxuuFsy"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2d. Other ways to load in tables:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BXGDNX6pfC"}],"identifier":"id-2d-other-ways-to-load-in-tables","label":"2d. Other ways to load in tables:","html_id":"id-2d-other-ways-to-load-in-tables","implicit":true,"key":"RYsba7C0GZ"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"RxTotrBVW0"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"As noted before, there’s a number of other ways you can load tabular data from files. For example,","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pUseRyk74N"}],"key":"Ks09XAuifU"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"moKXJ5Ut8C"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df2 = pd.read_csv(\n    \"https://support.staffbase.com/hc/en-us/article_attachments/360009197011/username-password-recovery-code.csv\"\n)","key":"YBOXojrSbu"},{"type":"output","id":"VIxBsqLvsBWlV6JrE5gjz","data":[],"key":"QhAfiI9ZlN"}],"data":{"type":"notebook-code"},"key":"yocVrBm9BQ"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df2","key":"ghtselTQ95"},{"type":"output","id":"HLoGUwdGXOWibfKLbtILT","data":[{"output_type":"execute_result","execution_count":123,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Username; Identifier;One-time password;Recovery code;First name;Last name;Department;Location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>booker12;9012;12se74;rb9012;Rachel;Booker;Sale...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>grey07;2070;04ap67;lg2070;Laura;Grey;Depot;London</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>johnson81;4081;30no86;cj4081;Craig;Johnson;Dep...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>jenkins46;9346;14ju73;mj9346;Mary;Jenkins;Engi...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>smith79;5079;09ja61;js5079;Jamie;Smith;Enginee...</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"  Username; Identifier;One-time password;Recovery code;First name;Last name;Department;Location\n0  booker12;9012;12se74;rb9012;Rachel;Booker;Sale...                                           \n1  grey07;2070;04ap67;lg2070;Laura;Grey;Depot;London                                           \n2  johnson81;4081;30no86;cj4081;Craig;Johnson;Dep...                                           \n3  jenkins46;9346;14ju73;mj9346;Mary;Jenkins;Engi...                                           \n4  smith79;5079;09ja61;js5079;Jamie;Smith;Enginee...                                           ","content_type":"text/plain"}}}],"key":"f42If4C2Pp"}],"data":{"type":"notebook-code"},"key":"gKSkIrg0mV"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Oh no! It looks mangled. The problem here is that the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pQoLnCxtOe"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"delimeter","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"klNZ4K7Tu7"}],"key":"vCk9gjG6Te"},{"type":"text","value":" is wrong. In other words, the character specifying the separation between entries is not correct. Before it was a comma (hence the “c” in csv file), but here it’s a semicolon.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vAfSLCYdV6"}],"key":"aueLxY8cyc"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Pandas can handle that. Just use the \"delimeter = \" argument as below:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"z1nV7778e4"}],"key":"R4NkE47U0t"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"f3RjVtwi9S"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df2 = pd.read_csv(\n    \"https://support.staffbase.com/hc/en-us/article_attachments/360009197011/username-password-recovery-code.csv\",\n    delimiter=\";\",\n)","key":"DpY7QQg8d5"},{"type":"output","id":"bqqlK1xLs5Bobi5fn_Uab","data":[],"key":"xbCOsF3zbq"}],"data":{"type":"notebook-code"},"key":"SMm4V9yaZi"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df2","key":"sFXJLMQhjD"},{"type":"output","id":"6BnTjHwoUsiXhBx5dK29T","data":[{"output_type":"execute_result","execution_count":125,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Username</th>\n      <th>Identifier</th>\n      <th>One-time password</th>\n      <th>Recovery code</th>\n      <th>First name</th>\n      <th>Last name</th>\n      <th>Department</th>\n      <th>Location</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>booker12</td>\n      <td>9012</td>\n      <td>12se74</td>\n      <td>rb9012</td>\n      <td>Rachel</td>\n      <td>Booker</td>\n      <td>Sales</td>\n      <td>Manchester</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>grey07</td>\n      <td>2070</td>\n      <td>04ap67</td>\n      <td>lg2070</td>\n      <td>Laura</td>\n      <td>Grey</td>\n      <td>Depot</td>\n      <td>London</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>johnson81</td>\n      <td>4081</td>\n      <td>30no86</td>\n      <td>cj4081</td>\n      <td>Craig</td>\n      <td>Johnson</td>\n      <td>Depot</td>\n      <td>London</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>jenkins46</td>\n      <td>9346</td>\n      <td>14ju73</td>\n      <td>mj9346</td>\n      <td>Mary</td>\n      <td>Jenkins</td>\n      <td>Engineering</td>\n      <td>Manchester</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>smith79</td>\n      <td>5079</td>\n      <td>09ja61</td>\n      <td>js5079</td>\n      <td>Jamie</td>\n      <td>Smith</td>\n      <td>Engineering</td>\n      <td>Manchester</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"    Username   Identifier One-time password Recovery code First name  \\\n0   booker12         9012            12se74        rb9012     Rachel   \n1     grey07         2070            04ap67        lg2070      Laura   \n2  johnson81         4081            30no86        cj4081      Craig   \n3  jenkins46         9346            14ju73        mj9346       Mary   \n4    smith79         5079            09ja61        js5079      Jamie   \n\n  Last name   Department    Location  \n0    Booker        Sales  Manchester  \n1      Grey        Depot      London  \n2   Johnson        Depot      London  \n3   Jenkins  Engineering  Manchester  \n4     Smith  Engineering  Manchester  ","content_type":"text/plain"}}}],"key":"NrXvJUYdp2"}],"data":{"type":"notebook-code"},"key":"DbfHpPUFXn"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"and voila! It’s fixed. The same can even be done if the delimiter is whitespace, in which case you want to use the delim_whitespace = True argument to read_csv().In short: pandas can handle data that is not simply a generic .csv file.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zF8eKuyHIZ"}],"key":"kQNaN2hZ16"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"AViGkEq38B"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"2e. Saving Dataframes","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"apMszVO69n"}],"identifier":"id-2e-saving-dataframes","label":"2e. Saving Dataframes","html_id":"id-2e-saving-dataframes","implicit":true,"key":"oWWcZ9nLOv"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"gAr5gFi8Rp"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"To save a dataframe (e.g., after you have made edits), one need only call .to_csv():","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"k6FRAvMZg1"}],"key":"D99sqP6F0j"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"F1amAtKDeR"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"df.to_csv(\"Modified_data.csv\")","key":"EVIPhv8VaQ"},{"type":"output","id":"F1waIb0nYDfs7yOjEQKWJ","data":[],"key":"Ikf2bjy8Wz"}],"data":{"type":"notebook-code"},"key":"ZsVs3VSJaw"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"which will save your file.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Fn3moY2MPA"}],"key":"Gd5NfqjAHH"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"y96wrubvh4"},{"type":"block","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"3. Creating Dataframes \"From Scratch’': a great way to save results","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nOfLIgiXrP"}],"identifier":"id-3-creating-dataframes-from-scratch-a-great-way-to-save-results","label":"3. Creating Dataframes \"From Scratch’': a great way to save results","html_id":"id-3-creating-dataframes-from-scratch-a-great-way-to-save-results","implicit":true,"key":"dobH05F313"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"w2JtyD6CJf"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Oftentimes, we don’t have begin data in a file, but we want to save the data into one. For example, one situation that often comes up in research is that you have run trials / a Monte Carlo simulation and you want a way to export that information (e.g., for exact reproducibility of your plots).","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nSvsZY5zOb"}],"key":"iEVxFVD301"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Let’s generate some mock data to demonstrate this:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"gvMDlEyOkW"}],"key":"bWjapExNTN"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"CAXiAR8YD9"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"array_1 = np.random.normal(size=1000)\narray_2 = 10 * array_1","key":"HePOCg2CjQ"},{"type":"output","id":"1URgHcQip-sVXhf7GfhJ-","data":[],"key":"trNgl73DDK"}],"data":{"type":"notebook-code"},"key":"CeOYFRHdTc"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"and here’s how to make that into a dataframe assuming each array above is its own column:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VkZCAhxiZh"}],"key":"KvHtRAMCyO"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"mYdurRx3pA"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"combined = np.column_stack([array_1, array_2])","key":"Ui0WdDBKbs"},{"type":"output","id":"t08nlvbClEjxrZWTPWQJx","data":[],"key":"CXNq99Ob6T"}],"data":{"type":"notebook-code"},"key":"R0nhYgCwf0"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"new_dataframe = pd.DataFrame(combined)","key":"DlYsy4GgOp"},{"type":"output","id":"KQoy-qH7FTdVCLDtvXrPU","data":[],"key":"JrYHgEu6lH"}],"data":{"type":"notebook-code"},"key":"UBdIQXYJXz"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"new_dataframe","key":"KJoOIsR1XY"},{"type":"output","id":"6Vlp5Q5hTC47vYS9md7r7","data":[{"output_type":"execute_result","execution_count":130,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.600289</td>\n      <td>6.002889</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.835341</td>\n      <td>8.353410</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.876270</td>\n      <td>8.762703</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.515567</td>\n      <td>15.155666</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-0.140828</td>\n      <td>-1.408279</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>995</th>\n      <td>-1.444972</td>\n      <td>-14.449715</td>\n    </tr>\n    <tr>\n      <th>996</th>\n      <td>0.467964</td>\n      <td>4.679637</td>\n    </tr>\n    <tr>\n      <th>997</th>\n      <td>1.380318</td>\n      <td>13.803183</td>\n    </tr>\n    <tr>\n      <th>998</th>\n      <td>-0.835870</td>\n      <td>-8.358704</td>\n    </tr>\n    <tr>\n      <th>999</th>\n      <td>0.457075</td>\n      <td>4.570748</td>\n    </tr>\n  </tbody>\n</table>\n<p>1000 rows × 2 columns</p>\n</div>","content_type":"text/html"},"text/plain":{"content":"            0          1\n0    0.600289   6.002889\n1    0.835341   8.353410\n2    0.876270   8.762703\n3    1.515567  15.155666\n4   -0.140828  -1.408279\n..        ...        ...\n995 -1.444972 -14.449715\n996  0.467964   4.679637\n997  1.380318  13.803183\n998 -0.835870  -8.358704\n999  0.457075   4.570748\n\n[1000 rows x 2 columns]","content_type":"text/plain"}}}],"key":"hTUKCTc12k"}],"data":{"type":"notebook-code"},"key":"Qjj6zmdYu0"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This obviously doesn’t have column names, but we can add them easily:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"njoEBswErR"}],"key":"D76OMatRy7"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"MUB9DMHfHn"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"new_dataframe.columns = [\"col1\", \"col2\"]\nnew_dataframe.head()","key":"QTOGWS3fge"},{"type":"output","id":"gUapsHH2MEd4Xs2BLIp0J","data":[{"output_type":"execute_result","execution_count":131,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>col1</th>\n      <th>col2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.600289</td>\n      <td>6.002889</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.835341</td>\n      <td>8.353410</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.876270</td>\n      <td>8.762703</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.515567</td>\n      <td>15.155666</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-0.140828</td>\n      <td>-1.408279</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"       col1       col2\n0  0.600289   6.002889\n1  0.835341   8.353410\n2  0.876270   8.762703\n3  1.515567  15.155666\n4 -0.140828  -1.408279","content_type":"text/plain"}}}],"key":"bFvfbqeTYS"}],"data":{"type":"notebook-code"},"key":"uPjmaKWMCM"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Using Dictionaries","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xedZu82KA5"}],"key":"TDiislYisU"}],"key":"YQE9SU4aDh"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"ISVIENqz5V"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The same can also be achieved using dictionaries and the from_dict() method. For example,","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QTeh2YCXgQ"}],"key":"K9lEkXq17Y"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"bNP9D0x5Eb"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"data_dictionary = {\"col1\": array_1, \"col2\": array_2}\nnew_dataframe = pd.DataFrame.from_dict(data_dictionary)\nnew_dataframe.head()","key":"p8dkmJfEcG"},{"type":"output","id":"njxpWS_hQQkcJ2fJ9K6tQ","data":[{"output_type":"execute_result","execution_count":132,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>col1</th>\n      <th>col2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.600289</td>\n      <td>6.002889</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.835341</td>\n      <td>8.353410</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.876270</td>\n      <td>8.762703</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1.515567</td>\n      <td>15.155666</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-0.140828</td>\n      <td>-1.408279</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"       col1       col2\n0  0.600289   6.002889\n1  0.835341   8.353410\n2  0.876270   8.762703\n3  1.515567  15.155666\n4 -0.140828  -1.408279","content_type":"text/plain"}}}],"key":"xOPp1Rd752"}],"data":{"type":"notebook-code"},"key":"zOyj7vBRJe"},{"type":"block","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"4. Filtering Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jlKCtnxy0h"}],"identifier":"id-4-filtering-data","label":"4. Filtering Data","html_id":"id-4-filtering-data","implicit":true,"key":"rtdTp1veMO"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"zaJFjS0BKK"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"What if we want to access subsets of the data? ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WPDGDQtlHU"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"It’s just like numpy arrays!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"imJwkVoQns"}],"key":"Jf5tfJszYQ"},{"type":"text","value":" You just pass the columns instead. For example,","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AQ52FOHvo4"}],"key":"hXnRBSclgn"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"WieWVwf1sO"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"filter1 = df[\"pmra\"] > 1\nfilter1","key":"o2QLOkAtBl"},{"type":"output","id":"crNUdfZyeCmc4bw473pCa","data":[{"output_type":"execute_result","execution_count":133,"metadata":{},"data":{"text/plain":{"content":"0       False\n1       False\n2       False\n3       False\n4       False\n        ...  \n8049    False\n8050    False\n8051    False\n8052    False\n8053    False\nName: pmra, Length: 8054, dtype: bool","content_type":"text/plain"}}}],"key":"VIKR9X7o4q"}],"data":{"type":"notebook-code"},"key":"HPKChPKUh8"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This generates a Series full of boolean (True/False) values. This might not be very useful on its own, but if we wanted to fully isolate the rows, we could use these booleans to create a new dataframe that meets our condtion. For example,","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hPUZkjp5hF"}],"key":"YhUZdE4BN9"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"cCVYWEgTRN"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"filtered_dataframe = df[filter1]","key":"B8Mt72gpYI"},{"type":"output","id":"rYaqc5LEkXCTqpahHytau","data":[],"key":"voQtCBBZIE"}],"data":{"type":"notebook-code"},"key":"h3Rdbd1d2Y"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The same works with multiple conditions (and can be done in one line - just watch parantheses placement):","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mvGqM4dNG9"}],"key":"aFJoUsZycL"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"QPeT0RjEVD"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"filtered_dataframe = df[(df[\"pmra\"] > 4) & (df[\"pmra\"] > 4)]","key":"IueFHZSffm"},{"type":"output","id":"3J9whEgbUSgOYLODxOz44","data":[],"key":"u7AjlJyJC0"}],"data":{"type":"notebook-code"},"key":"KB3Tl4kS9J"},{"type":"block","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"5. Plotting Data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VE5bUtQObs"}],"identifier":"id-5-plotting-data","label":"5. Plotting Data","html_id":"id-5-plotting-data","implicit":true,"key":"bG76BuBruz"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"soAsm8Aizf"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Pandas dataframe columns can be passed to matplotlib just like any other numpy array. Let’s see how that works:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kGMhT2Nvk2"}],"key":"dNiyr7r4ju"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"jlpivSxTcJ"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"plt.scatter(new_dataframe[\"col1\"], new_dataframe[\"col2\"])","key":"Bxbfsj8TSK"},{"type":"output","id":"xLcgXswBb9E2K-007-7nc","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"03311e14db10086edbe039d18a2f726e","path":"/build/03311e14db10086edbe039d18a2f726e.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"key":"ZsFEXXoGee"}],"data":{"type":"notebook-code"},"key":"NaX0C9qmDl"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"An entirely equivalent method is to do as follows:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lIe1G6rz3g"}],"key":"cPxCVKJRas"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"y1GdAmgRYn"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"new_dataframe.plot.scatter(\"col1\", \"col2\")","key":"ukXM2qKZMI"},{"type":"output","id":"S_oxVYMRkHCYqJoqey-dJ","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"14fdd3e3ad8bfb18b2293ddd08b761d7","path":"/build/14fdd3e3ad8bfb18b2293ddd08b761d7.png"},"text/plain":{"content":"<Figure size 640x480 with 1 Axes>","content_type":"text/plain"}}}],"key":"Xf5cODtUj6"}],"data":{"type":"notebook-code"},"key":"Q8Eh7dpWGS"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This one comes with free labels!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NajHsU1eu5"}],"key":"DtWDYrPIpM"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"ohpI6Bi7Da"},{"type":"block","children":[{"type":"admonition","class":"tip","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Exercise: Plotting a Hertzsprung-Russell Diagram of the Globular Cluster M92 using Data from the Gaia Mission","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"m0LrPXFCOB"}],"key":"rwk3geHthU"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"dL6R829S7t"},{"type":"emphasis","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Gaia","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"xpfNaGFwUY"}],"key":"GVn0sq4Mbr"},{"type":"text","value":" satellite has collected stellar positions, motions, and brightnesses for nearly two billion stars in the Milky Way. The file “GaiaM92.csv” contains example data from ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"cECAK3Kf8S"},{"type":"emphasis","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Gaia","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"fDCczgjYHX"}],"key":"AUcUf6t1lh"},{"type":"text","value":" specifically for the globular star cluster Messier 92 (M92). To investigate the data, take the following steps:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"zKGp6ChO74"}],"key":"J5EC5NWAgf"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":7,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Load the .csv file into a dataframe called m92_data. Each row in this datafile is an individual star.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"o6BIBhebVy"}],"key":"OmUJM0eJ9Y"}],"key":"zIYjHSAtej"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Plot a histogram of the column “phot_g_mean_mag”. This is the column that contains the brightnesses of stars.  What do you notice about the distribution?","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"DNNzuwRc3g"}],"key":"SH8dvXlGXU"}],"key":"nxv7L92qVM"},{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Now, make a scatterplot with the column “bp_rp” (a proxy for color) on the x-axis and “phot_g_mean_mag” (a proxy for luminosity) on the y-axis. Is the distribution in this plane uniform, or do you see patterns/sequences.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"UsUyPA1Emb"}],"key":"XpPZ8410D9"}],"key":"v2g15eihe1"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Clean up the scatterplot from part 3: first, invert the y-axis so smaller numbers are at the top of the plot, and limit the x range to -0.5 to 2.  Then, change the marker size and color to be small, black points. Lastly, label both axes something physically meaningful (not just the column names)","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"HoGi2EJo8Y"}],"key":"oMhQMTtOJl"}],"key":"NlNBrIlE9c"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Compare your diagram to the one shown at this link: ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"QcfgR4WWm5"},{"type":"link","url":"https://www.mps.mpg.de/5484970/original-1534168518.png?t=eyJ3aWR0aCI6ODAwLCJoZWlnaHQiOjYwMCwib2JqX2lkIjo1NDg0OTcwfQ==--5f4cb09228b20d5b3a71fbd40fa5a346ee619316","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Cluster HR Diagram","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"gYxjhqM5n1"}],"urlSource":"https://www.mps.mpg.de/5484970/original-1534168518.png?t=eyJ3aWR0aCI6ODAwLCJoZWlnaHQiOjYwMCwib2JqX2lkIjo1NDg0OTcwfQ==--5f4cb09228b20d5b3a71fbd40fa5a346ee619316","key":"Ef5Nk0w2Se"},{"type":"text","value":". Can you observe the same features in your plot?","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"p3TpxLClhp"}],"key":"M08aopX1mk"}],"key":"vFvi3vyQ5w"}],"key":"Cga1EkNzqc"}],"key":"ZQryauYhME"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"JlteXYX3dz"}],"key":"dCRbrgXB3a"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Functions in Python","url":"/functions","group":"Week  4"},"next":{"title":"Introduction to Inference in Astronomy: Fitting Models to Data","url":"/week8-linear-regression","group":"Week  8"}}},"domain":"http://localhost:3001"}