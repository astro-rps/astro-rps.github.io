{"kind":"Notebook","sha256":"a58b612ffa6589105c70dda67c8a67d103c0bd470ef8e67e6aecd9150d06dd44","slug":"numpy-and-arrays","location":"/01_Lectures/Week 2/03_Numpy_and_Arrays.ipynb","dependencies":[],"frontmatter":{"title":"Numpy and Arrays","github":"https://astro-rps.github.io/","keywords":[],"exports":[{"format":"ipynb","filename":"03_Numpy_and_Arrays.ipynb","url":"/build/03_Numpy_and_Arrays-3716d900d7e2ff817fd598337bf45d6b.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"One major data type that we have not yet introduced is the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HTwcv1szgf"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"array","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qYdaoydZo1"}],"key":"CA1DD539Da"},{"type":"text","value":" -- a close sibling of the list. One reason we’ve isolated it here is because it is not included in default Python -- instead, it’s included in a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OK0TET1pQu"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"package","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sY1PBzRkGz"}],"key":"apWzVsWd3B"},{"type":"text","value":" that we can import. The array offers many important advantages over the list when it comes to vectorized operations (which we’ll define below).","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FbWilwA5NA"}],"key":"l5XMvRdWM2"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"By the end of the day, you’ll be able to","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Px8k4RwAfq"}],"key":"rnmI9hM69m"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Import the numpy package","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"RvzBVQcsop"}],"key":"lLm6iE2pJW"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Construct and manipulate numpy arrays","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"i9CNMLJOcO"}],"key":"pp4XDb82WI"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Compare and contrast numpy arrays and lists","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"eDYQoBwZVf"}],"key":"PztEzK2Zmj"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Apply numpy functions for simple but important calculations","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"IqPbMdDJwk"}],"key":"siFa1YTmYc"}],"key":"ifjKP84PQQ"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"F4VhHxYm02"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In tandem with this notebook, I recommend creating a new script that you can use as a playground - it’s best not to use python interactiely in the shell as we move to more sophisticated programs.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LeaP1cdFUW"}],"key":"IpTiaUTJMH"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"abqzeKGUIQ"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Importing Numpy (and other Packages)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YTCqr8Yi9k"}],"identifier":"importing-numpy-and-other-packages","label":"Importing Numpy (and other Packages)","html_id":"importing-numpy-and-other-packages","implicit":true,"key":"p6OD4LoEMJ"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"llrn65jHTM"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"As part of your conda environment for this series, you downloaded a number of packages that are ubiquitously used throughout Python programming in any context. One of those packages is called ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zLVxlpi7zD"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"numpy","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"l7kIQ5gkWy"}],"key":"j9xBIv82fX"},{"type":"text","value":", which is short for numerical Python. You can import this package via the line","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HpZAt4N5NP"}],"key":"JbQjcMEDR2"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"bIvcVhQ3Vq"},{"type":"block","children":[{"type":"code","lang":"python","value":"import numpy as np","key":"pH9eJIhs9a"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"where the “as np” part is optional and just defines an alias (short name) that can save you a bit of typing later on.  After you’ve done this, you now have access to a large number of useful data structures and efficient, practical functions available as part of the package!","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"v7mg1lkl5h"}],"key":"wZB8CYHTQX"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"A08hFw49oF"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Import statements only needed to be called once at the start of the program (whether that be a script or in a python shell). Generally, we like to include them in a block at the top of the code, e.g.,","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CAJGvHXT8E"}],"key":"buBR0GMsTZ"},{"type":"code","lang":"python","value":"import numpy as np\nimport scipy\nimport astropy","key":"UyiqFagS0c"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"Jq3iB5Eo4a"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We won’t go into any more detail about packages for the day, but we will dig into the numpy package specifically since it complements the rest of the material we were discussing about data types.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LYa244lrxc"}],"key":"wMjJPbWphm"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"UweLhBYnuG"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Motivating numpy: The Problem with Lists and the need for Arrays","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tEWZAHJ4L2"}],"identifier":"motivating-numpy-the-problem-with-lists-and-the-need-for-arrays","label":"Motivating numpy: The Problem with Lists and the need for Arrays","html_id":"motivating-numpy-the-problem-with-lists-and-the-need-for-arrays","implicit":true,"key":"WcMxv5TiyB"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"rWjsejpU7m"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The main purpose of numpy is to allow for efficient data handling and computation, including for multidimensional collections of objects.  Numpy achieves this by improving on the list data type through a new data type called an “array”. To understand why the array is different (and better), let’s define one of each:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"B5hS5dgJbP"}],"key":"TmeUlcqyIj"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"SxImWs8l6T"},{"type":"block","children":[{"type":"code","lang":"python","value":"# define a list using default Python\nlist1 = [1,3,5]\n\n# np.array() is a function that takes a list as an argument and converts it into an array\narray1 = np.array([1,3,5]) \n\nprint(list1)\nprint(array1)","key":"YHJnqPki0N"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"NljmPL2AAd"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Let’s now say we want to add 10 to each element in list1 and array1. You might think of trying:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gB2Ly6hoJX"}],"key":"vlDj9KLNow"},{"type":"code","lang":"python","value":"print(list1 + 10)","key":"ndhnchso4z"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"but evidently that returns an error. Default Python doesn’t think you can simply add a single number to a list, because they are incompatible datatypes. Contrast that with numpy:","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"SZCU5eL9HD"}],"key":"gLWKWPnI5c"},{"type":"code","lang":"python","value":"print(array1 + 10)","key":"xH4NWi0MJs"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"which has the expected effect of adding 10 to each element.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"abkYejF1R9"}],"key":"lqTKcyHdZy"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"HYRzwyKQTA"},{"type":"block","children":[{"type":"admonition","class":"tip","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Exercise One: An Unusual Property of Lists","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TtpIy4lG1I"}],"key":"JBipJ8wqLN"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"First, define a list of numbers called ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"oL0uVhV9lk"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"nums","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lwRw8QiyBF"}],"key":"n6hHRp3Wzo"},{"type":"text","value":". Then, try to multiply this list by 5. Does it return an error? If not, what does it return?","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"IadALLexB2"}],"key":"T9IEPDGXaC"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Now, make a new variable ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"GQ1K5Ap4bO"},{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"num_arr","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"fRDT9IEsjB"}],"key":"KJQhTo2F2w"},{"type":"text","value":" by converting ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"KPV45PWBZn"},{"type":"strong","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"nums","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"uJVvcrZC5e"}],"key":"oODtbvLTkh"},{"type":"text","value":" from a list into a numpy array. Then, try multiplying by 5 again. What happens this time?","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"xpRquwqvOa"}],"key":"ADHXGLfgVP"}],"key":"x83yZFIjne"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"d69IPwmLUy"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"A related behavior of list is seen if you try adding them:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xCkJT3nvrl"}],"key":"RvffDeavqX"},{"type":"code","lang":"python","value":"print([1,3,5] + [2,4,6])","key":"n7h6LvpI21"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"koLoijMhHc"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"versues if you try with arrays,","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CRVtRB6Uxo"}],"key":"kgwCc4YCya"},{"type":"code","lang":"python","value":"a = np.array([1,3,5])\nb = np.array([2,4,6])\nprint(a+b)","key":"Fyc5C28Q9R"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"ezXD1TJdCn"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In short, numpy usually does what you expect to see from vectors: we call these element-wise operations.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"p8mzWzf1ld"}],"key":"qUyspOCdon"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"k40LG7xWzR"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The numpy advantage","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"R9ZOpCJhnq"}],"key":"Gc7TYZXo5Y"},{"type":"text","value":", in short, is being able to do vector operations. This works much faster than looping through eac (which is a generally slow thing to do in Python).","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qjNb9ZgVfW"}],"key":"kMQAytWuyx"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"While we’re here, ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"aSF4eOnGyV"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"one disadvantage","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Z86eHZi7VK"}],"key":"BwdjABSmO9"},{"type":"text","value":" of numpy arrays is that unlike lists, all elements in a numpy array must be the same data type. Thus, you can’t have an array [“cat”, 6], for example, while you could for a list.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ulsbZ5iaD2"}],"key":"SY6MKi9X3s"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"FppUcTL4uV"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"More reasons to use numpy: A myriad of useful functions","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"v2bsHbuHH5"}],"identifier":"more-reasons-to-use-numpy-a-myriad-of-useful-functions","label":"More reasons to use numpy: A myriad of useful functions","html_id":"more-reasons-to-use-numpy-a-myriad-of-useful-functions","implicit":true,"key":"pXjZlPHphg"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"G9AuBylKZc"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Even if you don’t care about arrays, numpy offers many useful convenience functions that are not offered in default Python.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"V3V0uHCEjs"}],"key":"lpdajHqRKo"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"zbTnDnIFGs"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"For example, you might want to try to compute the cosine of an angle:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kSOe2SXffa"}],"key":"ybhJAym6lW"},{"type":"code","lang":"python","value":"print(np.cos(10)) ## cosine function","key":"IxBHu6yins"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"M7pYIFQL1Q"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"or generate N evenly-spaced numbers between two endpoints of an interval,","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xI6O8iz5Pl"}],"key":"zmBC2xziMf"},{"type":"code","lang":"python","value":"low = 0\nhigh = 100\nN = 101\narr = np.linspace(low,high,N) ## generate 51 evenly spaced numbers between 0 and 5\nprint(arr)","key":"IdxTl8QQxm"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"udlE7F1GuS"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"or get the mean and median of a list/array quickly:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OyYbFJvMxp"}],"key":"HzugQG9dYW"},{"type":"code","lang":"python","value":"vals = [1,3,5,7,9]\nprint(np.mean(vals), np.median(vals))","key":"UsNi0rePWi"}],"data":{"type":"notebook-content","user_expressions":[]},"key":"qQDZ95WBW6"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Note that in the above example, vals is actually a list - not an array. That’s fine - numpy will do the conversion for you under the hood.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GjCdeb8KRA"}],"key":"WtZJLia51r"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"emYuDt4D9J"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This might not seem that impressive yet, but it becomes really useful when dealing with multi-dimensional data. If we wanted, for example, we could definite a numpy array of zeros of shaping 50x50 as follows:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"N1gFIApzUr"}],"key":"rso85nF95C"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"SUJRUzQ2sC"},{"type":"block","children":[{"type":"code","lang":"python","value":"blank_image = np.zeros((50,50))\nprint(blank_image)","key":"ISXbt1YY6s"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"We could then add or mulyiply a scalar value easily, or take the mean, or all at once!)","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"x1L5G6WTdo"}],"key":"KFDoGVvx0v"},{"type":"code","lang":"python","value":"print(np.mean(5*blank_image + 2))","key":"Pe1OnOby0M"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"oVLsWgbz2K"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"and it just acts like a giant vector. You can see where this might be going when it comes to manipulating astronomical images!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"f9gNGC37Ou"}],"key":"desDhKoBY2"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"mrfj0cYFdI"}],"key":"FS1CJbwm6D"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"A Deep Dive into Variables and Datatypes","url":"/variables-datatypes","group":"Week  2"},"next":{"title":"Introduction to Imports","url":"/import-lecture","group":"Week  3"}}},"domain":"http://localhost:3000"}