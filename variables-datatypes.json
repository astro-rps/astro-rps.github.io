{"kind":"Notebook","sha256":"a115122354b3eaa126c2f1c874d7fbef9040b36ae480f9e6d58b5d794832a4a6","slug":"variables-datatypes","location":"/01_Lectures/Week 2/02_Variables_Datatypes.ipynb","dependencies":[],"frontmatter":{"title":"A Deep Dive into Variables and Datatypes","github":"https://astro-rps.github.io/","keywords":[],"exports":[{"format":"ipynb","filename":"02_Variables_Datatypes.ipynb","url":"/build/02_Variables_Datatyp-6eb1695c078e3568a93064a47d11b060.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In the prior notebook, we introduced how to write more sophisticated multi-line codes using scripts. Here, we’re going to momentarily put scripting aside and focus on introducing some basic vocabulary that we will build on throughout the series. By the end of the day, you should be able to...","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CxIpHdLP2j"}],"key":"VcmLqBWiic"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Define the most important variable types in Pythons (int, float, string, list)","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"wL4WETmJF9"}],"key":"UpWKiJzH9U"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Use F-strings to refer to variables in printed strings","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"M3YLD3pO2s"}],"key":"XW74p9aIi2"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Use basic indexing to access elements of a list","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"SIkkT3w70o"}],"key":"LU1PEqk6Cc"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Write codes that take in inputs from the command line","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"T2Jq6J78xP"}],"key":"zk6yd4KyY7"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Understand the basic distinction between functions, objects, and variables","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"gRCqCbs9Yl"}],"key":"F3yOfFpK4m"}],"key":"TZtyyhA0hi"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"XNx4BCcRPk"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Variables in Python","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iocjBwhK2x"}],"identifier":"variables-in-python","label":"Variables in Python","html_id":"variables-in-python","implicit":true,"key":"VFdIY6MEW5"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"fLYpOyFF02"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In the previous notebook, we restricted our consideration of variables to simple numerical variables that we could add, subtract, multiply etc. easily in Python. However, variables are a lot more flexible than that in Python. To illustrate this point, here are four different valid variable definitions:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YGzjftBslf"}],"key":"AXIQ3v3M1B"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"PYYCO5JKff"},{"type":"block","children":[{"type":"code","lang":"python","value":"# define six different Python variables\nx = -6\nwidth = 7.0\nanimal_name = 'cat'\ndogs_are_friends = True \nlist_of_classes = ['french', 'galaxies', 'philosophy']\ndictionary1 = {'Name': 'Steve', 'Address': '219 Prospect Street', 'Office Number': 501}","key":"Ux4dIgKudB"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Reminder: the ‘=’ sign in each line of the above is NOT a mathematical statement. A single equals sign is the ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"BowHrFHoKJ"},{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"assignment operator","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"sTfYhKvfoU"}],"key":"sXsoJlJyjP"},{"type":"text","value":": it takes whatever is on the righthand side and stores it in the lefthand side. As before, we are free to print any of these, e.g.,","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"Y2SnvSrqxO"}],"key":"yYelGOTNLk"},{"type":"code","lang":"python","value":"print(list_of_classes)","key":"QK33vo7erG"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"which largely just prints whatever was on the righthand side of our variable declaration.","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"SxLXfDTeD7"}],"key":"IQHUYYdhTm"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"OTduaSF75W"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"As is clear from the above examples, there’s clearly a diversity in what can be stored in a Python variable. We call the different types of things that variables can be ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"b1OhX9HMZz"},{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"data types","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rGGDOpTctL"}],"key":"jzoBOIrXml"},{"type":"text","value":". All the data types have a unique name and a set of properties. To see their names, we can try:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZLtwk7ixV9"}],"key":"JmWpea8dli"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"sSefmpPb4k"},{"type":"block","children":[{"type":"code","lang":"python","value":"print(type(width))","key":"fVuHfotCbI"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"YAiG9ZtCd1"},{"type":"block","children":[{"type":"admonition","class":"tip","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Exercise One: Deducing variable types in Python","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gyttaUo7Dh"}],"key":"XyxLFp3xdK"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Using a terminal session in Python or a script, find the data types for the remaining variables in the earlier cell.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kQJHmNfART"}],"key":"fKtAslOIcR"}],"key":"zhF5cLaIoO"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"h0z54NK0dg"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now that we know how to check the type of a given variable, let’s dig into the properties of each type.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EjJhepLHlW"}],"key":"JI1wBfYThB"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"GtR8k4cQBn"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Integers","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NSNXDHEaRO"}],"identifier":"integers","label":"Integers","html_id":"integers","implicit":true,"key":"DtS70ELUJo"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"dsHdY7GH7X"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Integers (int) for short are your run-of-the-mill counting numbers (.., -2, -1, 0, 1, 2.. etc). They obey all the basic arithmetic you expect:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ziz1cpD2ai"}],"key":"R5uKU8xrUd"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"mHcv7JT8Dx"},{"type":"block","children":[{"type":"code","lang":"python","value":"a =  6\nb = -4 \nprint(a+b, a-b, a * b)","key":"hF5MqUIt9P"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"JiuCIojJ1Y"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In each of these cases, adding/subtracting/multiplying two integers results in another integer. This is hopefully intuitive. But what about dividing two integers?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YQNL1W4pZs"}],"key":"FcyBChLcNW"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"Q6GJBlQfZ2"},{"type":"block","children":[{"type":"code","lang":"python","value":"c = 5\nd = 2\ne = c / d\n\nprint(e) ## print the result of the calculation above","key":"ArNrF0cqjO"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"VtuVQ7sdFY"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If we now check the type of the result,","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"b17hZ1jt4D"}],"key":"Aea9hwfZUk"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"xKD0VyXJxp"},{"type":"block","children":[{"type":"code","lang":"python","value":"print(type(e))","key":"M42E5ykD6s"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"uAKY4EUuza"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can see that it’s something else -- a float.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nHXxLve9cO"}],"key":"QUXzYD618U"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"RGWtKtjKE5"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Floats","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fzeqF8GdhT"}],"identifier":"floats","label":"Floats","html_id":"floats","implicit":true,"key":"gAxbCzFioM"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"Pz0HosxDNA"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Floats, short for “floating point numbers,” are numbers with decimal places. As can be seen from the example above, Python automatically recognizes that it needs to use a float variable type to store the division of the variable c by the variable d. This is NOT the case in many other programming languages! In Java or C, for example, e would be an integer result equal to 2. Python is free to do this because it dynamically allocates memory to variable types, as opposed to pre-specifiying how much memory a variable needs.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ciy7cLsYgj"}],"key":"XASO4I6peQ"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"cmNQ5L4GrK"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If we want to specify that a number is a float, there are at least three equivalent ways of doing that:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mVyuSrKXJy"}],"key":"eu1alF2zba"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"Mdi0P5Cu9w"},{"type":"block","children":[{"type":"code","lang":"python","value":"f1 = float(24)\nf2 = 24.\nf3 = 24.0\n\nprint(type(f1), type(f2), type(f3))","key":"WUN7HT8PhU"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"VCdeq3gXQq"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In the first line here, float() is a function that takes whatever is in the parantheses (the so-called argument) and converts it to a float.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Er68vn7gik"}],"key":"TleSLxPYp5"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"NVr7vKNoBV"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Strings","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"driBhhq7jC"}],"identifier":"strings","label":"Strings","html_id":"strings","implicit":true,"key":"Hw8BnWjCjw"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"n1m85N5fJy"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Strings are essentially just letters enclosed by pairs of quotes ’ '. Almost any common character can be included in a string, including things like spaces, and strings can be any length (including length 0). Some examples:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SELuaQT8bU"}],"key":"wydXxnQnJu"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"Ks6EjD3Iz3"},{"type":"block","children":[{"type":"code","lang":"python","value":"animal_name = 'cat'\nblank_string = ''\nnet_id = 'zzz56'\nprint(animal_name, blank_string, net_id)","key":"bmk8YkOsBk"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"WVgiLkYHdi"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Note that both single and double quotes will both work - just be consistent.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Jj6Pbxc0F3"}],"key":"ptZbo9LtR4"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"gjfdRi9Rhn"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If you want to check how many characters are in a string, you can use the len() function:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oDJ2Tggq3E"}],"key":"ngafG5Fvq4"},{"type":"code","lang":"python","value":"print(len(animal_name))","key":"KPEckrl6No"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"g15cSIaSex"},{"type":"block","children":[{"type":"admonition","class":"important","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Referencing Variables within Strings","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xF92WNpSMn"}],"key":"HQMptwEh4N"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Often, you will find yourself wanting to write programs where you compute a result and then describe it in the context of a sentence/phrase. In Python, we do this using what are called “F-strings”. They work like this:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"n9gjY4nzOM"}],"key":"UqDV3qq6DK"},{"type":"code","lang":"python","value":"age = 22\nread_age = 19\n\nprint(f\"I am {age} years old\")","key":"TtnSe1dYlQ"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"You can do this with any number of variables in your string:","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"yZOs82uyub"}],"key":"McyvwpVz1H"},{"type":"code","lang":"python","value":"age = 22\nread_age = 19\nprint(f\"I am {age} years old and I learned to read at {read_age}\")","key":"XWH4nlSzBT"},{"type":"paragraph","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Note that this is functionally equivalent to doing","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"xxJjLfKuB0"}],"key":"pA8096pjJc"},{"type":"code","lang":"python","value":"age = 22\nread_age = 19\nprint(\"I am\", age, \"years old and I learned to read at\", read_age)","key":"Z6KBKEmatA"},{"type":"paragraph","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"potentially up to some spacing differences.","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"Em7P3sumx6"}],"key":"fPdTzvdSi1"}],"key":"QX4HsdlfWI"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"Cm3ZiKw4Ap"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Another property of strings is that they can be concatenated (added together) with the “+” operator. For example,","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QzXuyAa9EZ"}],"key":"tXPiqe5XHg"},{"type":"code","lang":"python","value":"string1 = 'hot'\nstring2 = 'dog'\nprint(string1 + string2)","key":"rrDrav49be"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"F6XtqGdypw"},{"type":"block","children":[{"type":"admonition","class":"tip","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Exercise Two: Exploring String Operations","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"W0tYq6vYrc"}],"key":"MftctegvS6"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In the above, we showed that strings can be concatenated with “+”. But what does “-” or “*” do? What happens if you do a string * a number?","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"i27bE3Tnbh"}],"key":"i7l9mLdr4l"}],"key":"XbWzu8p8QA"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"x4TdwbCcm0"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Lastly, it is occasionally useful to note that you can force quantities to be strings by using the str() function. For example,","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nWdgRdEhFv"}],"key":"ImTiurAqMO"},{"type":"code","lang":"python","value":"acc = str(9.8)\nprint(type(acc))","key":"XRPaaCwvOd"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"cJhOi8X6ri"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Lists","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UulMXJDbEE"}],"identifier":"lists","label":"Lists","html_id":"lists","implicit":true,"key":"ETctvBtOL6"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"lIuj6Brv9R"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Lists are exactly what they sound like: they are lists of “stuff” in Python, enclosed by hard brackets [ ]; the items in the list are called elements. You can put anything within a list, including any other data type (and even lists..)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nO8EGBLLXa"}],"key":"DRFwvAIIZL"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"WmWeYyUj75"},{"type":"block","children":[{"type":"code","lang":"python","value":"# a list of elements with all the same data types:\nlist_of_animals = ['cat', 'dog', 'frog']\nprint(list_of_animals)\n\n# a list of elemetns with varied data types:\nrandom_stuff = ['8', True, 'frog', (8,7)]\nprint(random_stuff)\n\n# an empty list\nempty_list = []\nprint(empty_list)","key":"De9KOTF60h"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"JJ37pVgQBY"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Just like we did for strings, we can find the length of a list as follows:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IY7MZsC4YG"}],"key":"ei1RactlxD"},{"type":"code","lang":"python","value":"list1 = ['a','b','c','d']\nlength = len(list1)\nprint(length)","key":"q51ur1kxvQ"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"Vce6XVUaK3"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If we have an existing list and want to add an element to the end, we can use the function .append():","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uktxGsnIiL"}],"key":"TaTnjV3usK"},{"type":"code","lang":"python","value":"list1 = ['a','b','c','d']\nprint(list1, len(list1))\nlist1.append('e')\nprint(list1, len(list1)) # print again to see the effect of the change","key":"R1IjVkrZaT"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"which might come in especially handy if you want to build up an empty list, e.g.,","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"awmuZZXWHf"}],"key":"FrjQbE13rN"},{"type":"code","lang":"python","value":"list_of_numbers = []\nlist_of_names.append('999-301-9191')","key":"al8mEizatj"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"H3wwTkxDrC"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can also do the same with remove():","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HJ58dvXRbc"}],"key":"UexIj21wWU"},{"type":"code","lang":"python","value":"list_of_animals = ['cat','cat', 'dog', 'frog','cat']\nprint(list_of_animals)\nlist_of_animals.remove('cat')\nprint(list_of_animals)","key":"DRcsG4B7PC"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"YDAFJAAQMF"},{"type":"block","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"List indexing","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RKV37uQFAm"}],"identifier":"list-indexing","label":"List indexing","html_id":"list-indexing","implicit":true,"key":"J1h5HllpWM"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"kGlFj6GeQF"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"An important property of lists is that they are (implictly) ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FuLd9WEQQc"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"indexed","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YreZk3U2bI"}],"key":"KJ5YPZr1T4"},{"type":"text","value":": each element has an associated index that specifies its position. Importantly, these count up starting from 0 (not 1!!) and go up to the length of your list minus one.  For example,","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VE7yOLn7Sy"}],"key":"w4A9fD1xjA"},{"type":"code","lang":"python","value":"letters = ['a','b','c','d']\nprint(letters[0]) # return the first item in the list\nprint(letters[1]) # return the second item in the list","key":"CUsgTvg8Dn"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"mJqqGX1MEP"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If you try to use an an index that is >= the length of the list, you will run into an error since that index doesn’t exist:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BrUfhC9znP"}],"key":"ITc9T9B621"},{"type":"code","lang":"python","value":"letters = ['a','b','c','d']\nprint(letters[4]) # attempt to return the 5th element of a 4-element list; this will fail","key":"LHxcswRnFf"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"CyRrcHR675"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Another useful index is -1, which will return the last element of the list:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UjSeBUegR8"}],"key":"Mfkpogwaux"},{"type":"code","lang":"python","value":"letters = ['a','b','c','d']\nprint(letters[-1]) # this will print 'd'","key":"AYogBLRDsw"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"iHaqXkJpUE"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"If we only want to print a subset of the list, you can use so-called list “slicing” with the colon (:). You can specify both the starting and ending index, as such:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rvLtwJIFK5"}],"key":"ML9aUVDOis"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"E1t48ti2P4"},{"type":"block","children":[{"type":"code","lang":"python","value":"letters = ['a','b','c','d']\nprint(letters[1:3]) # this will print","key":"MBzDsKpC5G"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"UFtmrHJvcK"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Here, only two elements are return because the : will not select the element with index equal to the number that comes after the colon.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"p563SKuw6M"}],"key":"QKAV0yb5vO"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"vtW9uiOeRo"},{"type":"block","children":[{"type":"admonition","class":"tip","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Exercise Three: Practice accessing Specific Elements in a List","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sqMwf9bWTD"}],"key":"H172EV1g5Q"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Define a list containing the first 7 powers of 2 (i.e., 2, 4, 8, etc).","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Rel3rhJtNw"}],"key":"L1AzMhmstn"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"What is the index of the number 8 in your list?","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"LyVShoz6sp"}],"key":"TjCUY8I73j"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Using list slicing, select the elements [8,16,32] and store them in a variable called middle_numbers","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"dSx14P4iqa"}],"key":"jbvVz9bqip"}],"key":"rlKP6ZDpLu"}],"key":"DjAFRqo6M3"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"z9vAjd01lT"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can also use functions to compute summary statistics for lists comprised only of numbers, e.g.,","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vjeTfjxo3F"}],"key":"ud8vPhr9Ez"},{"type":"code","lang":"python","value":"grades = [71, 85, 81, 92, 97, 100, 67, 45]\nworst_grade = min(grades)\nbest_grade = max(grades)\n\nprint(f\"The worst grade on the test was {worst_grade} and the best grade was {best_grade}.\")","key":"kq12vBZLvJ"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"zOAiZLRsKg"},{"type":"block","children":[{"type":"admonition","class":"tip","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Exercise Four: Calculating Averages","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OOLrjDDgTW"}],"key":"UPljUSRlm4"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Consider the list of grades above. Using the sum() and len() functions, find the average of the reported grades.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"BXgCMF5Cma"}],"key":"HcSJ7CSiFd"}],"key":"YbWCrnZ4NE"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"CYIQKysyIi"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Booleans","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"c1BuYykqcl"}],"identifier":"booleans","label":"Booleans","html_id":"booleans","implicit":true,"key":"gEHumWdB4U"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"ScuYVnDkUI"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Booleans are essentially binary truth values: True or False.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UJOGJzx30R"}],"key":"i1V6AXHCS3"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"HRu8ixIkti"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"is_physics_fun = False\ntoday_is_Monday = True","key":"BeTR4dE1gY"},{"type":"output","id":"kvwQc9cN2-ugBpHnMxxsV","data":[],"key":"sQNfg1pHFs"}],"data":{"type":"notebook-code"},"key":"Is5B6B4ofn"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"They can naturally arise when using ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zBLcSKKMzv"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"(in)equality operators","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"j7GbdEVFMN"}],"key":"c8vEnyLubx"},{"type":"text","value":":","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DkHTQtTxN2"}],"key":"FSf6XB1Zm2"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"pdFZUpVuDL"},{"type":"block","children":[{"type":"code","lang":"python","value":"print(6 > 7)\nprint('cat' == 'cat') # double equal sign checks for equality; single equal sign is for assignment\nprint('cat' != 'cat')  # != is how we say \"not equal to\" in Python","key":"NPiXbdRBWs"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"Tc52mTuaki"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"As with any other type of variable, you could store the output of some operation as follows:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TsWRAmH8mU"}],"key":"BZBFZ30UI8"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"TJr70MVTFH"},{"type":"block","children":[{"type":"code","lang":"python","value":"result = (7 > 6) # evaluate the inequality, and store a boolean in the variable called result\nprint(result)","key":"f2ufq9yGoV"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"nl0ZQDwzOd"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Booleans are very useful for controlling program flow. We’ll discuss this at length next week.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AAr0venleT"}],"key":"KGmSkiATDL"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"dh6amJxOi5"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Dictionaries","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EUaagfwSTd"}],"identifier":"dictionaries","label":"Dictionaries","html_id":"dictionaries","implicit":true,"key":"tli9ljWm5c"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"qdRGFIL9UG"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"A more complicated -- but very useful -- data type in Python is the dictionary. It provides a structured way to store data that can be accessed with a “key” (roughly, a column name). For example,","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FZuHmhHqp0"}],"key":"xSZaswlArc"},{"type":"code","lang":"python","value":"dictionary1 = {'Name': 'Steve', 'Address': '219 Prospect Street', 'Office Number': 501}\nprint(dictionary1['Name'])","key":"dRTzpA57Kq"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"bcKn2bt2KQ"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In the event you need to access the list of fields, you can print dictionary1.keys().","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"T35VLQthVq"}],"key":"eAlpcyK6CA"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"Dg34jLe6Lg"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Aside: Taking Command-Line inputs during Python scripts","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OsGNElLnHs"}],"identifier":"aside-taking-command-line-inputs-during-python-scripts","label":"Aside: Taking Command-Line inputs during Python scripts","html_id":"aside-taking-command-line-inputs-during-python-scripts","implicit":true,"key":"bzheehj7OW"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"u2lCuPjT9O"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"A useful function when writing scripts is input(). If you include this in your code as follows,","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SbGsTRJvdf"}],"key":"kSHkOYrpTg"},{"type":"code","lang":"python","value":"var_to_set = input()\nprint(f\"Your input was {var_to_set}\")","key":"zIJxA5AFqP"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"your input will be recored in the variable var_to_set.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"q6P77czJZH"}],"key":"eHDeu6ZLJ9"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"mrTgmlFrn9"},{"type":"block","children":[{"type":"admonition","class":"tip","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Exercise Four: Practice accessing Specific Elements in a List","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BI09YMjfXO"}],"key":"vM9Tu9jeJ9"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Return to your program for creating averages from earier. Now, rather than using the list provided called grades, write the program to use input() to populate an empty list with grades (for now, you can just use five lines of input() - we’ll show you how to make ths more automated next week). Then, run the average code over your user-provided list, and print the result in a sentence using an F-string.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xGalqi2fny"}],"key":"COqzHZ8r9A"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"As test case, try inputting [100,100,80,60,60] and verify that your code produces 80.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"GiWnT77wxA"}],"key":"ASZxwLHoHl"}],"key":"t5zBqDdhkp"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"fMDd6eKxbx"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The Big Picture: Objects and Functions in Python","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ppL3H6JRDt"}],"identifier":"the-big-picture-objects-and-functions-in-python","label":"The Big Picture: Objects and Functions in Python","html_id":"the-big-picture-objects-and-functions-in-python","implicit":true,"key":"TrEe0BFnb3"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"U8WjCnem0E"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Python is what we call an ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VkleDmnzx0"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"object-oriented","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XsYkLhuwQj"}],"key":"xs9db5GicH"},{"type":"text","value":" program language. The term ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NPttMCPDMG"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"objects","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oCfnbsCXrh"}],"key":"jX9rwaHhu1"},{"type":"text","value":" here refer to bundles of data (attributes) and functions (which often act on that data). The structure of objects (e.g., what functions they contain) is defined by a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lgvfsHSZNL"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"class","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Bf28rTIWmt"}],"key":"yibfQzqF64"},{"type":"text","value":"; this is why you see the word <class when you run type() on a variable. ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dJcVpqCSbR"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"All Python data types are classes, and by extension, all variables are objects.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AcThpgzJbm"}],"key":"iinw3KuAwI"},{"type":"text","value":". For example, let’s take the case of a list:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Sn0rZCqldS"}],"key":"jekHaNkupp"},{"type":"code","lang":"python","value":"mylist = [5,4]\nmylist.append(5)","key":"shudg0Ke0X"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Here, mylist is an object of type list, with a value of [5,4]. All objects of type list have a function .append() associated with them. This isn’t true for objects of type int,str, etc -- they have their own functions associated with them since they are each types defined by different classes.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"gXVaTAlhit"}],"key":"ktOyPuBjch"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"A fun example of a class function associated with int() is as_integer_ratio():","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"N5MePv1Gmq"}],"key":"Zw7OO0uaaq"},{"type":"code","lang":"python","value":"var = 3\nprint(var.as_integer_ratio())","key":"JznnKDQaHs"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"uiY8DORjb8"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"As a general comment, functions are almost always accompanied by a double parantheses(). Anything within those parantheses is called an argument. In the case above, the object itself (var) is an implict argument of the function (as_integer_ratio()).","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rmJAaOZEZk"}],"key":"e6qT6kXhFT"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"UvUVmQDf6j"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We’ll take much more about functions and objects throughout this series, so don’t worry if this is a bit jargon-y and opaque at this point. For now, we will move on to introduce another important datatype called the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"H3SeTVMnJx"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"array","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"K41QPYG8WY"}],"key":"B3atDT5XDw"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HiJVfh8Ukm"}],"key":"FsdUGF1D9P"}],"data":{"type":"notebook-content","tags":[],"user_expressions":[]},"visibility":"show","key":"EXiQCVDyTg"}],"key":"beZ6dFxyz8"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"First Python Codes","url":"/first-python-codes","group":"Week  2"},"next":{"title":"Numpy and Arrays","url":"/numpy-and-arrays","group":"Week  2"}}},"domain":"http://localhost:3004"}