{"kind":"Notebook","sha256":"d3d2e9c7661901207b457146f71f0bae208ebaf6b266ab635c15ea7ac7e5e199","slug":"loop-lecture","location":"/01_Lectures/Week 3/loop_lecture.ipynb","dependencies":[],"frontmatter":{"title":"Looping in Python","github":"https://astro-rps.github.io/","keywords":[],"exports":[{"format":"ipynb","filename":"loop_lecture.ipynb","url":"/build/loop_lecture-906b9f548b74fd7507d6f766a533c7e1.ipynb"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Part 1: “for-loops” and “while-loops”","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"QoKtAyUirs"}],"identifier":"part-1-for-loops-and-while-loops","label":"Part 1: “for-loops” and “while-loops”","html_id":"part-1-for-loops-and-while-loops","implicit":true,"key":"YeHAbJkMtJ"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"This week we will be discussing basic iterable objects (lists, arrays, tuples ...) and how you can use them to repeat operations.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"qCARKB3BAS"}],"key":"j1ignytZBJ"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"For example lets say you want to print something out several times. Last week you learned some numpy basics so lets start with that...","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"pPwr2XqaQY"}],"key":"TOQyAH7TIj"}],"data":{"type":"notebook-content"},"key":"qPRVA4dVLn"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"import numpy as np #importing numpy\n\nprint(np.arange(5)) # this is an array with 5 elements","key":"sh95mP7jXo"},{"type":"output","id":"TexbtT-FooyRJHkfUtY9r","data":[{"name":"stdout","output_type":"stream","text":"[0 1 2 3 4]\n"}],"key":"nUSxUwDoIk"}],"data":{"type":"notebook-code"},"key":"mwn5f1dRiP"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"# start the for loop\nfor i in np.arange(5): # pay attention to the syntax (\":\") here! \n    print(i)","key":"BJkzXR5xPl"},{"type":"output","id":"fP6VD8cKtZcmwGnjcA3a6","data":[{"name":"stdout","output_type":"stream","text":"0\n1\n2\n3\n4\n"}],"key":"SSM0qmJ259"}],"data":{"type":"notebook-code"},"key":"k1LFucLgLX"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This is an example of a “for-loop” which is the most basic looping fucntionality in Python.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"luHQ1qed31"}],"key":"hR9mu7MRnv"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"It is intiialized by typing ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Ui3OWyEB9L"},{"type":"inlineCode","value":"for","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xM3wd13kES"},{"type":"text","value":" in front of the the variable ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UI9LxShwCy"},{"type":"inlineCode","value":"i","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HgR496vCRl"},{"type":"text","value":" which is a an element ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lNSlZWNAjp"},{"type":"inlineCode","value":"in","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"cACXDopgck"},{"type":"text","value":" the iterable ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MjCpuFA0S8"},{"type":"inlineCode","value":"np.arange(5)","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RIJmNnEoQZ"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JPdjBisLP2"}],"key":"qmpMVCwDZ3"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"It works by iterating over each element in the numpy array. Importantly, the variable ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Jw4JTzOqhz"},{"type":"inlineCode","value":"i","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"wPtFSAWQNi"},{"type":"text","value":" can be anything as long as you are consistent.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YqU61adUsh"}],"key":"SQuBgNnaqc"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"It is effectively a dummy variable that represents each element in the iterable.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"lh0H5fBiAd"}],"key":"lkcjc69wmc"}],"data":{"type":"notebook-content"},"key":"gOsmB1g1nr"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"for wowza in np.arange(5): #now instead of \"i\" I used the \"wowza\" variable\n    print(wowza)","key":"ij3xyNQx5s"},{"type":"output","id":"qgc8YTD0mou0mc4iLrIqo","data":[{"name":"stdout","output_type":"stream","text":"0\n1\n2\n3\n4\n"}],"key":"O2eKHvdcgo"}],"data":{"type":"notebook-code"},"key":"Sy77rDaopd"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"You could do somethign similar with a “while-loop” which unlike the “for-loop” iterates as long as some condition is met. For example:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Cv5rr79fc8"}],"key":"hRfkBiP7OK"}],"data":{"type":"notebook-content"},"key":"Xq72zNvg6k"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"# Initialize a counter\ncounter = 0\n\n# Define the condition for the while loop\nwhile counter < 5:\n    print(counter)\n    counter += 1  # Increment the counter","key":"odF4rA8RDu"},{"type":"output","id":"7lc3IoLzRG1hSqvw1GznZ","data":[{"name":"stdout","output_type":"stream","text":"0\n1\n2\n3\n4\n"}],"key":"xekmpasDVy"}],"data":{"type":"notebook-code"},"key":"WYuslPRQ0a"},{"type":"block","children":[{"type":"admonition","kind":"tip","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Exercise: A useful while loop","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pr29VAewKX"}],"key":"PQa8J5nYOr"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"While loops are usually not that useful, because normally we have an iterable where we know the length. But what if we have a program and don’t know how many times the loop will need to run?","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xMnpnX4nSJ"}],"key":"K0yfjcH1MB"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Your program from last week takes inputs (like star temperature and radius) and outputs the luminosity. We could make this program run indefinitely (so that it keeps asking for more inputs) and provides more answers until the code is quit. We could also use this technique to make sure the users have entered the right type of value (via try and except).","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Qw0gM6w6tm"}],"key":"IcxkPPXpmG"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Using your ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"TnEGnrZiBW"},{"type":"inlineCode","value":"SB.py","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"PUJNi624b1"},{"type":"text","value":" script, add a ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"GfVxaZHVHO"},{"type":"inlineCode","value":"while","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"mVd9uFMeOL"},{"type":"text","value":" loop that repeats the program indefinitely. You can use ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"AeG3azqEtk"},{"type":"inlineCode","value":"while True:","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"WZiVuTLO7E"},{"type":"text","value":" to start the loop. Add an ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"WvWZohpCKD"},{"type":"inlineCode","value":"if-statement","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"xcVsNBagbE"},{"type":"text","value":" such that if any of the inputs are ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"GAHjQNfEOp"},{"type":"inlineCode","value":"quit","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"lVFcsHOEpO"},{"type":"text","value":", ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"cgeZsEETgm"},{"type":"inlineCode","value":"q","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"GzM2WJpokw"},{"type":"text","value":", or ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"WsouGwzCwV"},{"type":"inlineCode","value":"exit","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"QpX81XJFir"},{"type":"text","value":", the loop ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Sa4zuzPiCy"},{"type":"inlineCode","value":"break","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"NtuK8sh6nu"},{"type":"text","value":"s.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"VIpjHWLyAs"}],"key":"EqzNDH7pnS"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"As a bonus: check if the inputs are the correct (float) types and prompt the user again if they are not.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"aoOEryRhXJ"}],"key":"dbl6f1PXcY"}],"key":"Ci9kdPN9fB"},{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"Intially, you might not see this looping business as incredibly useful but lets take a more complicated example...","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"ZsIIqMD02v"}],"key":"v2nx8dPsVG"}],"data":{"type":"notebook-content"},"key":"ttClCjw0iW"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"# Define the height of the tree\nheight = 5\n\n# Using a for loop to print a Christmas tree\nfor i in range(1, height + 1): \n    spaces = \" \" * (height - i)\n    stars = \"*\" * (2 * i - 1)\n    print(spaces + stars)","key":"TnjXMN8tj9"},{"type":"output","id":"cUEy47oxOlpMJT-nW-VZt","data":[{"name":"stdout","output_type":"stream","text":"    *\n   ***\n  *****\n *******\n*********\n"}],"key":"Mc4PhoS3XO"}],"data":{"type":"notebook-code"},"key":"CnV02Zz0K2"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"This would be kind annoying to print out by actually typing out the spaces and the stars, especially if you want to make the tree larger..","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ubvxzsdcBv"}],"key":"y2oQH40RvW"}],"data":{"type":"notebook-content"},"key":"uWzHocipKM"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"# Define the height of the tree\nheight = 12\n\n# Using a for loop to print a Christmas tree\nfor i in range(1, height + 1): \n    spaces = \" \" * (height - i)\n    stars = \"*\" * (2 * i - 1)\n    print(spaces + stars)","key":"UdUGicQUqS"},{"type":"output","id":"rt11pLmUVnA_VTkcdfU3e","data":[{"name":"stdout","output_type":"stream","text":"           *\n          ***\n         *****\n        *******\n       *********\n      ***********\n     *************\n    ***************\n   *****************\n  *******************\n *********************\n***********************\n"}],"key":"lHJjbSNExO"}],"data":{"type":"notebook-code"},"key":"Bzumo33hQw"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Above we have the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZYKKNpGuNc"},{"type":"inlineCode","value":"range","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tygE8f4j4W"},{"type":"text","value":" function which creates a “range” instance. This is another example of an iterable","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tcYifSUuHP"}],"key":"KQCu6wDGBQ"}],"data":{"type":"notebook-content"},"key":"gccGpzOK6q"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Part 2: Iterables","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WZghxFr79B"}],"identifier":"part-2-iterables","label":"Part 2: Iterables","html_id":"part-2-iterables","implicit":true,"key":"odKwS9u8Ti"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Okay so now that we have the basic syntax of these two loops, lets talk iterables. Lets start with a list","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"F0M3oBvbo1"}],"key":"ZMLIpJevhM"}],"data":{"type":"notebook-content"},"key":"u4dKC8pwzT"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"my_grocery_list = [\"apples\", \"oranges\", \"dorritos\", \"mustard\", \"eggs\", \"gummy bears\"] \n# pay attention to the syntax here! ([] square brackets!)","key":"zFFwqfmKvy"},{"type":"output","id":"3FnDn4xIvrSbaOH9cI-Wq","data":[],"key":"lP5GsfQEoi"}],"data":{"type":"notebook-code"},"key":"fbCD1zcqW5"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"how many things do I have in my list? and what is each element? and can I iterate over these random things that aren’t integers?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Nm2K1oeaqD"}],"key":"QjjcCABmKm"}],"data":{"type":"notebook-content"},"key":"LWQ8P0R29S"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"print( len(my_grocery_list) )\n\nprint( type(my_grocery_list[2]))","key":"NKDpGmdsf3"},{"type":"output","id":"8vbFRome99MkKJergy9db","data":[{"name":"stdout","output_type":"stream","text":"6\n<class 'str'>\n"}],"key":"VHtMpiazLN"}],"data":{"type":"notebook-code"},"key":"iS16AObXQf"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"for food in my_grocery_list[3:5]:\n    print(\"oh shoot I forgot the\", food)","key":"OC1AFAooOY"},{"type":"output","id":"swe00eXfn5CE_JW366aL_","data":[{"name":"stdout","output_type":"stream","text":"oh shoot I forgot the mustard\noh shoot I forgot the eggs\n"}],"key":"wGkqrXJyB8"}],"data":{"type":"notebook-code"},"key":"eak9nkyNKW"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"As we can see there are 6 ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XniPiNiqIc"},{"type":"inlineCode","value":"str","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AXx41OigDy"},{"type":"text","value":" elements in the list and iterating over the 3rd and 4th element is perfectly easy!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NyojDHdm1k"}],"key":"ER9zIMCPxh"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In other words the iterable can be an interger, a string, a list itslef, basically any data type! Lets now loop over a dictionary!","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"QnbSyLjOWS"}],"key":"ZgNOFHGGTY"}],"data":{"type":"notebook-content"},"key":"wygWAsWQ8F"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"# Define a treasure map dictionary\ntreasure_map = {\n    'Start': 'You find yourself on a mysterious island.',\n    'Palm Tree': 'Under the palm tree, you discover a clue written in the sand.',\n    'Cave Entrance': 'Following the clue, you reach the entrance of a dark cave.',\n    'Treasure Room': 'After navigating through the cave, you discover the hidden treasure room!',\n    'X marks the spot': 'You find the treasure chest buried under a giant \"X\" on the floor.'\n}","key":"F25SkqZDFZ"},{"type":"output","id":"ph-0PbOZUNzAe4KA75qY4","data":[],"key":"nQXwHg0bLt"}],"data":{"type":"notebook-code"},"key":"gASMkJta6K"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"# Use a for loop to explore the treasure map\nfor location, description in treasure_map.items():\n    print(f'You are at {location}: {description}')\n    user_input = input('Do you want to continue the adventure? (yes/no): ')\n    \n    if user_input.lower() != 'yes':\n        print('Thanks for playing! Adventure complete.')\n        break","key":"HNNZbpKQ9z"},{"type":"output","id":"Zc0W0FMKpmCc0pOGp8iwY","data":[{"name":"stdout","output_type":"stream","text":"You are at Start: You find yourself on a mysterious island.\nThanks for playing! Adventure complete.\n"}],"key":"ib72DoSgbk"}],"data":{"type":"notebook-code"},"key":"DFJT7m1Td4"},{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Part 3: Double for-loops ... Tread carefully!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ISut0L6G3G"}],"identifier":"part-3-double-for-loops-tread-carefully","label":"Part 3: Double for-loops ... Tread carefully!","html_id":"part-3-double-for-loops-tread-carefully","implicit":true,"key":"UDfKue8WCO"}],"data":{"type":"notebook-content"},"key":"v5aX4SrEaT"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Pretend you are sampling ages by asking 10 random people in the grocery store.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UeUzYjaFrU"}],"key":"vezl9p6ozf"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"You do this expirement three times in the same grocery store on Monday, Tuesday and Wednesday.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"ED5CNZaRdb"}],"key":"Fq3cSitcRh"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"You now have three lists of numbers that (rather conviently) are the same length.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"pKIFPCXJpk"}],"key":"AUmn0j4Eaf"}],"data":{"type":"notebook-content"},"key":"X6FyZMHPrh"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"list_Mon = [5, 12, 3, 5, 67, 1, 2, 34, 2, 89]\n\nlist_Tues = [15, 45, 21, 2, 8, 9, 54, 99, 17, 51]\n\nlist_Wed = [32, 65, 11, 9, 5, 75, 21, 14, 39, 71]","key":"pXeG2pUKnb"},{"type":"output","id":"e8b3G54h_Yg8kxuRjw4xz","data":[],"key":"EcoNd9Xww8"}],"data":{"type":"notebook-code"},"key":"aknW546pYd"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now lets say you wanted to know if any of these people could have been around to see the 2001 superbowl. How would you go about doing so?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"V444Uhd80Q"}],"key":"O9aGl09O1X"}],"data":{"type":"notebook-content"},"key":"vZtQIXWEJq"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"min_age = 2023 - 2001\nlist_Mon > min_age","key":"IxQ6QXhGRu"},{"type":"output","id":"d3PJnO803nOms1-SwJgjd","data":[{"ename":"TypeError","evalue":"'>' not supported between instances of 'list' and 'int'","output_type":"error","traceback":"\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)\n\u001b[1;32m/Users/jsmonzon/Research/materials-development/Week3/lecture.ipynb Cell 27\u001b[0m line \u001b[0;36m2\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/jsmonzon/Research/materials-development/Week3/lecture.ipynb#X43sZmlsZQ%3D%3D?line=0'>1</a>\u001b[0m min_age \u001b[39m=\u001b[39m \u001b[39m2023\u001b[39m \u001b[39m-\u001b[39m \u001b[39m2001\u001b[39m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/jsmonzon/Research/materials-development/Week3/lecture.ipynb#X43sZmlsZQ%3D%3D?line=1'>2</a>\u001b[0m list_Mon \u001b[39m>\u001b[39;49m min_age\n\n\u001b[0;31mTypeError\u001b[0m: '>' not supported between instances of 'list' and 'int'"}],"key":"KlCPAKxDMK"}],"data":{"type":"notebook-code"},"key":"gsXNOhhrH4"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"well that doesn’t seem to work! so maybe we use a handy loop!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rET75xYhwH"}],"key":"In337Ngdn9"}],"data":{"type":"notebook-content"},"key":"CpWWD9dCH9"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"bool_Mon = []\nfor i in list_Mon:\n    bool_Mon.append(i > min_age)\n\nprint(bool_Mon)\nprint(\"only \" +str(sum(bool_Mon)) + \" people are old enough!\")","key":"QRo2f6NLnc"},{"type":"output","id":"cnKOf_1PyE-o8MgoxgAbJ","data":[{"name":"stdout","output_type":"stream","text":"[False, False, False, False, True, False, False, True, False, True]\nonly 3 people are old enough!\n"}],"key":"zzfzA8xemc"}],"data":{"type":"notebook-code"},"key":"rk9zEE8dFe"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"okay but what about the other days? Maybe we iterate over a list of lists?","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PLABh3gVz4"}],"key":"ryMWZXOtEY"}],"data":{"type":"notebook-content"},"key":"WmRoiU0myt"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"all_ages = [list_Mon, list_Tues, list_Wed]\nall_bool = []\n\nfor list in all_ages:\n    for i in list:\n        all_bool.append(i > min_age)\n\n\nprint(all_bool)\nprint(\"only \" +str(sum(all_bool)) + \" people are old enough!\")","key":"itpYTElp92"},{"type":"output","id":"6VG-AXf2WCUOgO9EknDRk","data":[{"name":"stdout","output_type":"stream","text":"[False, False, False, False, True, False, False, True, False, True, False, True, False, False, False, False, True, True, False, True, True, True, False, False, False, True, False, False, True, True]\nonly 12 people are old enough!\n"}],"key":"UZ9LNPAHmF"}],"data":{"type":"notebook-code"},"key":"m7B0JdxPhE"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Great so the double for-loop seems to work fine!, but lets say it wasn’t just 10 people each day, and it wasn’t just for three days.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yWXMVG5BEe"}],"key":"Wd0bT6YyVH"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Instead, lets say you and your friends talked to 100,000 people each day for 10 years (10x365 days)","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lQLuOgH4Gh"}],"key":"BmmNfG28HE"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Now since I can’t generate that many numbers on the spot I will use the numpy.random package. We will discuss this more later...","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"EZomqm0Osh"}],"key":"BQuL80tia5"}],"data":{"type":"notebook-content"},"key":"AZxjBlRYfo"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"all_ages_BIG = np.random.randint(0,100, size=(3650,100000)).tolist()","key":"S9hSeX8Rj5"},{"type":"output","id":"pROkQEz_oL0Jv0wlZDzrN","data":[],"key":"BXdQ2QOkdx"}],"data":{"type":"notebook-code"},"key":"eFKcruePKJ"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"lets try the same scheme as before with the double for-loop!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"r9q9fVY0YB"}],"key":"ic7OKcvfxa"}],"data":{"type":"notebook-content"},"key":"u8QvyGl7Nt"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"all_bool_BIG = []\n\nfor list in all_ages_BIG:\n    for i in list:\n        all_bool_BIG.append(i > min_age)","key":"u0o9ELOkuQ"},{"type":"output","id":"jSS6V2v7XVbNtIIVoqMLn","data":[],"key":"ZuYIUuOILh"}],"data":{"type":"notebook-code"},"key":"t09K8iHnPx"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"print(\"10^\" +str(np.log10(sum(all_bool_BIG))) + \" people are old enough!\")","key":"j9gojUaqpF"},{"type":"output","id":"dizWm_7fmm9AKaf3OFn6f","data":[{"name":"stdout","output_type":"stream","text":"10^8.448775123083287 people are old enough!\n"}],"key":"wlfcFRYd2r"}],"data":{"type":"notebook-code"},"key":"ViGIcInTfW"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"that is A LOT of people! so much so that it took our computer ~43 seconds to compute that number!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vbryzh6MPW"}],"key":"Pjsn12EZ6n"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"worst of all this is for a relatively simple operation! anything slightly more complicated would greatly impact the preformance of this scheme.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"rTBWRh98vO"}],"key":"qVggjJy4aE"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"We can do a lot better than that (namely by using numpy arrays)","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"KdEMzbfYrX"}],"key":"TXtJQlmys8"}],"data":{"type":"notebook-content"},"key":"ivDMNxF9Mx"},{"type":"block","children":[{"type":"code","lang":"python","executable":true,"value":"all_ages_BIG = np.random.randint(0,100, size=(3650,100000))\n\nwow = np.sum(all_ages_BIG > min_age)\n\nprint(\"10^\" +str(np.log10(wow)) + \" people are old enough!\")","key":"L6upbckMW7"},{"type":"output","id":"kpRtV4W4y-rpDvjBPpehM","data":[{"name":"stdout","output_type":"stream","text":"10^8.448763231936013 people are old enough!\n"}],"key":"Kc0EWDiSOo"}],"data":{"type":"notebook-code"},"key":"pGjMp49lZV"},{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"that only took 3 seconds! so be careful when constructing these seemingly harmless tools and remember double-for loops are a LAST RESORT!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"p2GTpAN9Nq"}],"key":"WCSjDVVAyp"}],"data":{"type":"notebook-content"},"key":"MZeoTSuOqb"}],"key":"OMkxRNMSgK"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Logic Flow and Error Parsing","url":"/logic-lecture","group":"Week  3"},"next":{"title":"Functions in Python","url":"/functions","group":"Week  4"}}},"domain":"http://localhost:3000"}